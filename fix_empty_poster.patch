From 03fb24fa9344b89bc50a1b1b92c2dacf8acadc43 Mon Sep 17 00:00:00 2001
From: Taras Krutiak <krut.taras@gmail.com>
Date: Tue, 27 Aug 2013 18:25:58 +0300
Subject: [PATCH 1/7] Added logging to find bug with second chart. Status: In
 progres

---
 Spline/App.config                    |  11 +++
 Spline/App/Models/AppMath.cs         | 177 +++++++++++++++++++++++++++++++++++
 Spline/App/Models/ApproxFunction.cs  |  12 +++
 Spline/App/Models/ComboBoxItem.cs    |  34 +++++++
 Spline/App/Models/ErmitSplineUtil.cs |  11 +++
 Spline/App/Models/FunctionUtil.cs    |  60 ++++++++++++
 Spline/App/Models/IFunction.cs       |  12 +++
 Spline/App/Models/Section.cs         |  37 ++++++++
 Spline/App/Utils/Logger.cs           |  41 ++++++++
 Spline/MainForm.cs                   |  23 +++--
 Spline/Models/AppMath.cs             | 177 -----------------------------------
 Spline/Models/ApproxFunction.cs      |  12 ---
 Spline/Models/ComboBoxItem.cs        |  34 -------
 Spline/Models/ErmitSplineUtil.cs     |  11 ---
 Spline/Models/FunctionUtil.cs        |  60 ------------
 Spline/Models/IFunction.cs           |  12 ---
 Spline/Models/Section.cs             |  35 -------
 Spline/Spline.csproj                 |  16 ++--
 18 files changed, 421 insertions(+), 354 deletions(-)
 create mode 100644 Spline/App.config
 create mode 100644 Spline/App/Models/AppMath.cs
 create mode 100644 Spline/App/Models/ApproxFunction.cs
 create mode 100644 Spline/App/Models/ComboBoxItem.cs
 create mode 100644 Spline/App/Models/ErmitSplineUtil.cs
 create mode 100644 Spline/App/Models/FunctionUtil.cs
 create mode 100644 Spline/App/Models/IFunction.cs
 create mode 100644 Spline/App/Models/Section.cs
 create mode 100644 Spline/App/Utils/Logger.cs
 delete mode 100644 Spline/Models/AppMath.cs
 delete mode 100644 Spline/Models/ApproxFunction.cs
 delete mode 100644 Spline/Models/ComboBoxItem.cs
 delete mode 100644 Spline/Models/ErmitSplineUtil.cs
 delete mode 100644 Spline/Models/FunctionUtil.cs
 delete mode 100644 Spline/Models/IFunction.cs
 delete mode 100644 Spline/Models/Section.cs

diff --git a/Spline/App.config b/Spline/App.config
new file mode 100644
index 0000000..8910747
--- /dev/null
+++ b/Spline/App.config
@@ -0,0 +1,11 @@
+﻿<?xml version="1.0" encoding="utf-8" ?>
+<configuration>
+  <system.diagnostics>
+    <trace autoflush="true" indentsize="4">
+      <listeners>
+        <add name="myListener" type="System.Diagnostics.TextWriterTraceListener" initializeData="application.log" />
+        <remove name="Default" />
+      </listeners>
+    </trace>
+  </system.diagnostics>
+</configuration>
\ No newline at end of file
diff --git a/Spline/App/Models/AppMath.cs b/Spline/App/Models/AppMath.cs
new file mode 100644
index 0000000..19ab809
--- /dev/null
+++ b/Spline/App/Models/AppMath.cs
@@ -0,0 +1,177 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+
+namespace Spline.Models
+{
+    public class AppMath
+    {
+        public abstract class BaseFunc: IFunction
+        {
+            public string Text { get; set; }
+       
+            public override string ToString()
+            {
+                return Text;
+            }
+
+            public abstract double Val(double x);
+
+            public abstract double Diff
+                (double x, int i = 1);
+
+            //TODO: make abstract
+            //public bool ValidatePoints(double a, double b);
+            
+        }
+
+        public class Sin : BaseFunc
+        {
+       
+            public Sin()
+            {
+                this.Text = "Sin(x)";
+            }
+
+            public override double Val(double x)
+            {
+                return Math.Sin(x);
+            }
+
+
+            public override double Diff(double x, int i = 1)
+            {
+                switch (i)
+                {
+                    case 1:
+                        return Math.Cos(x);
+                        break;
+                    case 2:
+                        return (-1 * Math.Sin(x));
+                        break;
+                    default:
+                        throw new Exception();
+                        break;
+                }
+            }
+        }
+
+
+        public class Ln : BaseFunc
+        {
+
+            public Ln()
+            {
+                this.Text = "Ln(x)";
+            }
+
+            public override double Val(double x)
+            {
+                return Math.Log(x);
+            }
+
+            public override double Diff(double x, int i = 1)
+            {
+                if (x == 0)
+                {
+                    throw new Exception();
+                }
+                switch (i)
+                {
+                    case 1:
+                        return (1 / x);
+                        break;
+                    case 2:
+                        return (-1 / Math.Pow(x, 2));
+                        break;
+                    default:
+                        throw new Exception();
+                        break;
+                }
+            }
+        }
+
+
+        public class Exp : BaseFunc
+        {
+            public Exp()
+            {
+                this.Text = "Exp(x)";
+            }
+
+            public override double Val(double x)
+            {
+                return Math.Exp(x);
+            }
+
+            public override double Diff(double x, int i = 1)
+            {
+                return Math.Exp(x);
+            }
+        }
+
+        public class Division : BaseFunc
+        {
+            public Division()
+            {
+                this.Text = "1/(1+x^2)";
+            }
+
+            public override double Val(double x)
+            {
+                return (1/(1+x*x));
+            }
+
+            public override double Diff(double x, int i = 1)
+            {
+                switch (i)
+                {
+                    case 1:
+                        return (-2*x/Math.Pow((x*x+1),2));
+                        break;
+                    case 2:
+                        return ((6*x*x-2)/ Math.Pow((x * x + 1), 3));
+                        break;
+                    default:
+                        throw new Exception();
+                        break;
+                }
+            }
+        }
+
+
+        public class Tangens : BaseFunc
+        {
+            public Tangens()
+            {
+                this.Text = "Tg(x)";
+            }
+
+            public override double Val(double x)
+            {
+                return Math.Tan(x);
+            }
+
+            public override double Diff(double x, int i = 1)
+            {
+
+                switch (i)
+                {
+                    case 1:
+                        return Math.Pow((1/Math.Cos(x)),2);
+                        break;
+                    case 2:
+                        return 2 * Math.Tan(x) * Math.Pow((1 / Math.Cos(x)), 2);
+                        break;
+                    default:
+                        throw new Exception();
+                        break;
+                }
+            }
+        }
+
+
+
+    }
+}
diff --git a/Spline/App/Models/ApproxFunction.cs b/Spline/App/Models/ApproxFunction.cs
new file mode 100644
index 0000000..5c60dba
--- /dev/null
+++ b/Spline/App/Models/ApproxFunction.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+
+namespace Spline.Models
+{
+    //TODO: finish this  
+    class ApproxFunction
+    {
+    }
+}
diff --git a/Spline/App/Models/ComboBoxItem.cs b/Spline/App/Models/ComboBoxItem.cs
new file mode 100644
index 0000000..b03bf16
--- /dev/null
+++ b/Spline/App/Models/ComboBoxItem.cs
@@ -0,0 +1,34 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+
+namespace Spline.Models
+{
+    class ComboBoxItem
+    {
+        public string Text { get; set; }
+        public object Value { get; set; }
+
+        public override string ToString()
+        {
+            return Text;
+        }
+
+        public ComboBoxItem()
+        {
+        }
+
+        public ComboBoxItem(AppMath.BaseFunc func)
+        {
+            this.Text = func.Text;
+            this.Value = func;
+        }
+
+        public AppMath.BaseFunc GetFunction()
+        {
+            return (AppMath.BaseFunc)this.Value;
+        }
+
+    }
+}
diff --git a/Spline/App/Models/ErmitSplineUtil.cs b/Spline/App/Models/ErmitSplineUtil.cs
new file mode 100644
index 0000000..3f29a2e
--- /dev/null
+++ b/Spline/App/Models/ErmitSplineUtil.cs
@@ -0,0 +1,11 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+
+namespace Spline.Models
+{
+    class ErmitSplineUtil
+    {
+    }
+}
diff --git a/Spline/App/Models/FunctionUtil.cs b/Spline/App/Models/FunctionUtil.cs
new file mode 100644
index 0000000..be9563a
--- /dev/null
+++ b/Spline/App/Models/FunctionUtil.cs
@@ -0,0 +1,60 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Reflection;
+using Spline.Models;
+using ZedGraph;
+
+namespace Spline.Models
+{
+    static class FunctionUtil
+    {
+        public static IList<AppMath.BaseFunc> GetAllFunctions()
+        {
+            IList<AppMath.BaseFunc> functions = new List<AppMath.BaseFunc>();
+
+            Assembly[] classes= AppDomain.CurrentDomain.GetAssemblies();
+
+            Type baseFunc = typeof(AppMath.BaseFunc);
+            for (int i = 0; i < classes.Length; i++)
+            {
+                foreach(Type type in classes[i].GetTypes())
+                {
+                      if (type.IsSubclassOf(baseFunc))
+                      {
+                        functions.Add((AppMath.BaseFunc) Activator.CreateInstance(type));
+                      }
+                }
+              
+            }
+            return functions;
+        }
+
+        public static object[] GetComboboxItemsWithFunctions()
+        {
+            IList<AppMath.BaseFunc> functions = GetAllFunctions();
+            object[] CBItems = new object[functions.Count];
+            for (int i = 0; i < CBItems.Length; i++)
+            {
+                CBItems[i] = new ComboBoxItem(functions[i]);
+            }
+            return CBItems;
+        }
+
+        public static PointPairList GetPointPairsInRange(double FromPoint,double ToPoint,IFunction func,double h=0.001)
+        {
+            PointPairList PointsList= new PointPairList();
+
+            for (double x = FromPoint; x <= ToPoint; x += h)
+            {
+
+                double fx = func.Val(x);
+
+                PointsList.Add(x, fx);
+
+            }
+            return PointsList;
+        }
+    }
+}
diff --git a/Spline/App/Models/IFunction.cs b/Spline/App/Models/IFunction.cs
new file mode 100644
index 0000000..f550c32
--- /dev/null
+++ b/Spline/App/Models/IFunction.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+
+namespace Spline.Models
+{
+    interface IFunction
+    {
+        double Val(double x);
+    }
+}
diff --git a/Spline/App/Models/Section.cs b/Spline/App/Models/Section.cs
new file mode 100644
index 0000000..6e3d8b1
--- /dev/null
+++ b/Spline/App/Models/Section.cs
@@ -0,0 +1,37 @@
+﻿using Spline.App.Utils;
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+
+namespace Spline.Models
+{
+    //section of aproximation 
+    class Section
+    {
+        public double LeftPoint;
+        public double RightPoint;
+        public double[] Coef;
+        public double Mu;
+
+        private Section()
+        {
+        }
+        public Section(double LPoint, double RPoint,double[] coef, double Mu)
+        {
+            if (LPoint < RPoint)
+            {
+                this.RightPoint = RPoint;
+                this.LeftPoint = LPoint;
+                this.Coef = coef;
+                this.Mu = Mu;
+            }
+            else
+            {
+                throw new Exception();
+            }
+            Logger.Info("saving section with parametrs \n x = " + LeftPoint + ", y = " + RightPoint + ", " + coef.ToString() + ", Mu = " + Mu, "Section");
+        }
+
+    }
+}
diff --git a/Spline/App/Utils/Logger.cs b/Spline/App/Utils/Logger.cs
new file mode 100644
index 0000000..089b985
--- /dev/null
+++ b/Spline/App/Utils/Logger.cs
@@ -0,0 +1,41 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Diagnostics;
+
+namespace Spline.App.Utils
+{
+    class Logger
+    {
+        public static void Error(string message, string module)
+        {
+            WriteEntry(message, "error", module);
+        }
+
+        public static void Error(Exception ex, string module)
+        {
+            WriteEntry(ex.Message, "error", module);
+        }
+
+        public static void Warning(string message, string module)
+        {
+            WriteEntry(message, "warning", module);
+        }
+
+        public static void Info(string message, string module)
+        {
+            WriteEntry(message, "info", module);
+        }
+
+        private static void WriteEntry(string message, string type, string module)
+        {
+            Trace.WriteLine(
+                    string.Format("{0},{1},{2},{3}",
+                                  DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
+                                  type,
+                                  module,
+                                  message));
+        }
+    }
+}
diff --git a/Spline/MainForm.cs b/Spline/MainForm.cs
index b489534..bae9926 100644
--- a/Spline/MainForm.cs
+++ b/Spline/MainForm.cs
@@ -2,10 +2,12 @@
 using ZedGraph;
 
 using System;
+using System.IO;
 using System.Collections.Generic;
 using System.Drawing;
 using System.Windows.Forms;
 using Spline.Models;
+using Spline.App.Utils;
 
 namespace Spline
 {
@@ -29,6 +31,7 @@ namespace Spline
             pane.Title.Text = "Графік функції та наближення";
             GraphPane pane2 = zedGraphControl2.GraphPane;
             pane2.Title.Text = "Графік функції похибки";
+            
         }
 
         protected double[] exp(AppMath.BaseFunc F, double x0, double x1)
@@ -119,21 +122,26 @@ namespace Spline
                 zedGraphControl1.Invalidate();
                 list_1.Clear();
 
-
+                Logger.Info("Mu  function max value of each section fr function " + Function.ToString(), "MainForm");
+                int LogCounter = 1;
                 foreach (Section sec in section)
                 {
-                    double[] coef = exp(Function, sec.LeftPoint, sec.RightPoint);
-
+                    double[] coef = sec.Coef;
+                    double max = 0;
+                
                     for (double x = sec.LeftPoint; x <= sec.RightPoint; x += 0.001)
                     {
 
                         double fx = Math.Abs(Function.Val(x) - AproximFunc(x, coef));
-
+                        if (fx > max) max = fx;
                         list_1.Add(x, fx);
 
+                        Logger.Info("Mu function = " + list_1.ToArray().ToString(), "MainForm");
+
                     }
+                    Logger.Info("Section#" + LogCounter++ + "Max value = " + max, "MainForm");
                 }
-             
+
                 LineItem newCurves = pane2.AddCurve("Ro", list_1, Color.Blue, SymbolType.None);
                 list_1 = new PointPairList();
                 list_1.Add(xmin,Mu);
@@ -155,6 +163,8 @@ namespace Spline
 
         private void Compute(double a, double b)
         {
+            int LOG_SECTION_COUNTER = 1;
+
             double zl, zp,xmid,xtemp;
             zl = a;
             zp=b;
@@ -169,6 +179,7 @@ namespace Spline
             {
                 xtemp=(xmid+zp)/2.0;
                 prevMu=findMu(zl,xtemp,Function);
+                Logger.Info("Start computing Mu for Section# " + LOG_SECTION_COUNTER++, "MainForm");
                 while(Math.Abs(Mu-prevMu)/Mu>0.01 || prevMu>Mu)
                 {
                     if(prevMu>Mu)
@@ -183,7 +194,7 @@ namespace Spline
                     }
                     prevMu=findMu(zl,xtemp,Function);
 
-
+                    Logger.Info("computed Mu =  " + prevMu, "MainForm");
                 }
 
                 zp=xtemp;
diff --git a/Spline/Models/AppMath.cs b/Spline/Models/AppMath.cs
deleted file mode 100644
index 19ab809..0000000
--- a/Spline/Models/AppMath.cs
+++ /dev/null
@@ -1,177 +0,0 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-
-namespace Spline.Models
-{
-    public class AppMath
-    {
-        public abstract class BaseFunc: IFunction
-        {
-            public string Text { get; set; }
-       
-            public override string ToString()
-            {
-                return Text;
-            }
-
-            public abstract double Val(double x);
-
-            public abstract double Diff
-                (double x, int i = 1);
-
-            //TODO: make abstract
-            //public bool ValidatePoints(double a, double b);
-            
-        }
-
-        public class Sin : BaseFunc
-        {
-       
-            public Sin()
-            {
-                this.Text = "Sin(x)";
-            }
-
-            public override double Val(double x)
-            {
-                return Math.Sin(x);
-            }
-
-
-            public override double Diff(double x, int i = 1)
-            {
-                switch (i)
-                {
-                    case 1:
-                        return Math.Cos(x);
-                        break;
-                    case 2:
-                        return (-1 * Math.Sin(x));
-                        break;
-                    default:
-                        throw new Exception();
-                        break;
-                }
-            }
-        }
-
-
-        public class Ln : BaseFunc
-        {
-
-            public Ln()
-            {
-                this.Text = "Ln(x)";
-            }
-
-            public override double Val(double x)
-            {
-                return Math.Log(x);
-            }
-
-            public override double Diff(double x, int i = 1)
-            {
-                if (x == 0)
-                {
-                    throw new Exception();
-                }
-                switch (i)
-                {
-                    case 1:
-                        return (1 / x);
-                        break;
-                    case 2:
-                        return (-1 / Math.Pow(x, 2));
-                        break;
-                    default:
-                        throw new Exception();
-                        break;
-                }
-            }
-        }
-
-
-        public class Exp : BaseFunc
-        {
-            public Exp()
-            {
-                this.Text = "Exp(x)";
-            }
-
-            public override double Val(double x)
-            {
-                return Math.Exp(x);
-            }
-
-            public override double Diff(double x, int i = 1)
-            {
-                return Math.Exp(x);
-            }
-        }
-
-        public class Division : BaseFunc
-        {
-            public Division()
-            {
-                this.Text = "1/(1+x^2)";
-            }
-
-            public override double Val(double x)
-            {
-                return (1/(1+x*x));
-            }
-
-            public override double Diff(double x, int i = 1)
-            {
-                switch (i)
-                {
-                    case 1:
-                        return (-2*x/Math.Pow((x*x+1),2));
-                        break;
-                    case 2:
-                        return ((6*x*x-2)/ Math.Pow((x * x + 1), 3));
-                        break;
-                    default:
-                        throw new Exception();
-                        break;
-                }
-            }
-        }
-
-
-        public class Tangens : BaseFunc
-        {
-            public Tangens()
-            {
-                this.Text = "Tg(x)";
-            }
-
-            public override double Val(double x)
-            {
-                return Math.Tan(x);
-            }
-
-            public override double Diff(double x, int i = 1)
-            {
-
-                switch (i)
-                {
-                    case 1:
-                        return Math.Pow((1/Math.Cos(x)),2);
-                        break;
-                    case 2:
-                        return 2 * Math.Tan(x) * Math.Pow((1 / Math.Cos(x)), 2);
-                        break;
-                    default:
-                        throw new Exception();
-                        break;
-                }
-            }
-        }
-
-
-
-    }
-}
diff --git a/Spline/Models/ApproxFunction.cs b/Spline/Models/ApproxFunction.cs
deleted file mode 100644
index 5c60dba..0000000
--- a/Spline/Models/ApproxFunction.cs
+++ /dev/null
@@ -1,12 +0,0 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-
-namespace Spline.Models
-{
-    //TODO: finish this  
-    class ApproxFunction
-    {
-    }
-}
diff --git a/Spline/Models/ComboBoxItem.cs b/Spline/Models/ComboBoxItem.cs
deleted file mode 100644
index b03bf16..0000000
--- a/Spline/Models/ComboBoxItem.cs
+++ /dev/null
@@ -1,34 +0,0 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-
-namespace Spline.Models
-{
-    class ComboBoxItem
-    {
-        public string Text { get; set; }
-        public object Value { get; set; }
-
-        public override string ToString()
-        {
-            return Text;
-        }
-
-        public ComboBoxItem()
-        {
-        }
-
-        public ComboBoxItem(AppMath.BaseFunc func)
-        {
-            this.Text = func.Text;
-            this.Value = func;
-        }
-
-        public AppMath.BaseFunc GetFunction()
-        {
-            return (AppMath.BaseFunc)this.Value;
-        }
-
-    }
-}
diff --git a/Spline/Models/ErmitSplineUtil.cs b/Spline/Models/ErmitSplineUtil.cs
deleted file mode 100644
index 3f29a2e..0000000
--- a/Spline/Models/ErmitSplineUtil.cs
+++ /dev/null
@@ -1,11 +0,0 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-
-namespace Spline.Models
-{
-    class ErmitSplineUtil
-    {
-    }
-}
diff --git a/Spline/Models/FunctionUtil.cs b/Spline/Models/FunctionUtil.cs
deleted file mode 100644
index be9563a..0000000
--- a/Spline/Models/FunctionUtil.cs
+++ /dev/null
@@ -1,60 +0,0 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Reflection;
-using Spline.Models;
-using ZedGraph;
-
-namespace Spline.Models
-{
-    static class FunctionUtil
-    {
-        public static IList<AppMath.BaseFunc> GetAllFunctions()
-        {
-            IList<AppMath.BaseFunc> functions = new List<AppMath.BaseFunc>();
-
-            Assembly[] classes= AppDomain.CurrentDomain.GetAssemblies();
-
-            Type baseFunc = typeof(AppMath.BaseFunc);
-            for (int i = 0; i < classes.Length; i++)
-            {
-                foreach(Type type in classes[i].GetTypes())
-                {
-                      if (type.IsSubclassOf(baseFunc))
-                      {
-                        functions.Add((AppMath.BaseFunc) Activator.CreateInstance(type));
-                      }
-                }
-              
-            }
-            return functions;
-        }
-
-        public static object[] GetComboboxItemsWithFunctions()
-        {
-            IList<AppMath.BaseFunc> functions = GetAllFunctions();
-            object[] CBItems = new object[functions.Count];
-            for (int i = 0; i < CBItems.Length; i++)
-            {
-                CBItems[i] = new ComboBoxItem(functions[i]);
-            }
-            return CBItems;
-        }
-
-        public static PointPairList GetPointPairsInRange(double FromPoint,double ToPoint,IFunction func,double h=0.001)
-        {
-            PointPairList PointsList= new PointPairList();
-
-            for (double x = FromPoint; x <= ToPoint; x += h)
-            {
-
-                double fx = func.Val(x);
-
-                PointsList.Add(x, fx);
-
-            }
-            return PointsList;
-        }
-    }
-}
diff --git a/Spline/Models/IFunction.cs b/Spline/Models/IFunction.cs
deleted file mode 100644
index f550c32..0000000
--- a/Spline/Models/IFunction.cs
+++ /dev/null
@@ -1,12 +0,0 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-
-namespace Spline.Models
-{
-    interface IFunction
-    {
-        double Val(double x);
-    }
-}
diff --git a/Spline/Models/Section.cs b/Spline/Models/Section.cs
deleted file mode 100644
index 5095f6a..0000000
--- a/Spline/Models/Section.cs
+++ /dev/null
@@ -1,35 +0,0 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-
-namespace Spline.Models
-{
-    //section of aproximation 
-    class Section
-    {
-        public double LeftPoint;
-        public double RightPoint;
-        public double[] Coef;
-        public double Mu;
-
-        private Section()
-        {
-        }
-        public Section(double LPoint, double RPoint,double[] coef, double Mu)
-        {
-            if (LPoint < RPoint)
-            {
-                this.RightPoint = RPoint;
-                this.LeftPoint = LPoint;
-                this.Coef = coef;
-                this.Mu = Mu;
-            }
-            else
-            {
-                throw new Exception();
-            }
-        }
-
-    }
-}
diff --git a/Spline/Spline.csproj b/Spline/Spline.csproj
index ecca303..906804f 100644
--- a/Spline/Spline.csproj
+++ b/Spline/Spline.csproj
@@ -54,18 +54,19 @@
     </Reference>
   </ItemGroup>
   <ItemGroup>
+    <Compile Include="App\Utils\Logger.cs" />
     <Compile Include="MainForm.cs">
       <SubType>Form</SubType>
     </Compile>
     <Compile Include="MainForm.Designer.cs">
       <DependentUpon>MainForm.cs</DependentUpon>
     </Compile>
-    <Compile Include="Models\ApproxFunction.cs" />
-    <Compile Include="Models\ComboBoxItem.cs" />
-    <Compile Include="Models\ErmitSplineUtil.cs" />
-    <Compile Include="Models\FunctionUtil.cs" />
-    <Compile Include="Models\IFunction.cs" />
-    <Compile Include="Models\Section.cs" />
+    <Compile Include="App\Models\ApproxFunction.cs" />
+    <Compile Include="App\Models\ComboBoxItem.cs" />
+    <Compile Include="App\Models\ErmitSplineUtil.cs" />
+    <Compile Include="App\Models\FunctionUtil.cs" />
+    <Compile Include="App\Models\IFunction.cs" />
+    <Compile Include="App\Models\Section.cs" />
     <Compile Include="Program.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
     <Compile Include="Properties\Resources.Designer.cs">
@@ -73,7 +74,7 @@
       <DesignTime>True</DesignTime>
       <DependentUpon>Resources.resx</DependentUpon>
     </Compile>
-    <Compile Include="Models\AppMath.cs" />
+    <Compile Include="App\Models\AppMath.cs" />
   </ItemGroup>
   <ItemGroup>
     <EmbeddedResource Include="MainForm.resx">
@@ -85,6 +86,7 @@
     </EmbeddedResource>
   </ItemGroup>
   <ItemGroup>
+    <None Include="App.config" />
     <None Include="Resources\CodeCogsEqn.gif" />
   </ItemGroup>
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
-- 
1.8.1.msysgit.1


From e935f10ffc31f3c1dcd2d75325f6921f819e4631 Mon Sep 17 00:00:00 2001
From: Taras Krutiak <krut.taras@gmail.com>
Date: Mon, 2 Sep 2013 00:28:06 +0300
Subject: [PATCH 2/7] add new spline-method with defined section number

---
 Spline/App/Models/ExponencialSpline.cs |  34 ++++++++
 Spline/MainForm.Designer.cs            |  31 ++++---
 Spline/MainForm.cs                     | 151 ++++++++++-----------------------
 Spline/Spline.csproj                   |   2 +
 Spline/ZzadanPohubkou.cs               | 110 ++++++++++++++++++++++++
 5 files changed, 212 insertions(+), 116 deletions(-)
 create mode 100644 Spline/App/Models/ExponencialSpline.cs
 create mode 100644 Spline/ZzadanPohubkou.cs

diff --git a/Spline/App/Models/ExponencialSpline.cs b/Spline/App/Models/ExponencialSpline.cs
new file mode 100644
index 0000000..3251c5e
--- /dev/null
+++ b/Spline/App/Models/ExponencialSpline.cs
@@ -0,0 +1,34 @@
+﻿using Spline.Models;
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+
+namespace Spline.App.Models
+{
+    class ExponencialSpline
+    {
+        public static double[] GetCoeficients(AppMath.BaseFunc F, double x0, double x1)
+        {
+            double[] a = new double[4];
+            double x0_x1 = (x0 - x1);
+            double LogF0_F1 = Math.Log(F.Val(x0) / F.Val(x1));
+
+
+            double d = a[3] = (F.Diff(x1) / F.Val(x1) + F.Diff(x0) / F.Val(x0) + 2 * LogF0_F1 / (x1 - x0)) / Math.Pow(-1 * x0_x1, 2);
+
+            double c = a[2] = ((2 * x0 * x0 - x0 * x1 - x1 * x1) * a[3] - F.Diff(x0) / F.Val(x0) - LogF0_F1 / (-1 * x0_x1)) / (-1 * x0_x1);
+
+            double b = a[1] = 1 / (x1 - x0) * (Math.Log(F.Val(x1) / F.Val(x0)) - a[3] * (Math.Pow(x1, 3) - Math.Pow(x0, 3)) - c * (Math.Pow(x1, 2) - Math.Pow(x0, 2)));
+            //A
+            a[0] = F.Val(x0) * Math.Exp(-1 * (d * Math.Pow(x0, 3) + c * Math.Pow(x0, 2) + b * x0));
+
+            return a;
+        }
+
+        public static double AproximFunc(double x, double[] coef)
+        {
+            return (coef[0] * Math.Exp(coef[1] * x + coef[2] * Math.Pow(x, 2) + coef[3] * Math.Pow(x, 3)));
+        }
+    }
+}
diff --git a/Spline/MainForm.Designer.cs b/Spline/MainForm.Designer.cs
index 413186a..6e62ff7 100644
--- a/Spline/MainForm.Designer.cs
+++ b/Spline/MainForm.Designer.cs
@@ -55,9 +55,10 @@ namespace Spline
             this.label7 = new System.Windows.Forms.Label();
             this.groupBox1 = new System.Windows.Forms.GroupBox();
             this.groupBox2 = new System.Windows.Forms.GroupBox();
+            this.radioButton3 = new System.Windows.Forms.RadioButton();
             this.radioButton2 = new System.Windows.Forms.RadioButton();
             this.radioButton1 = new System.Windows.Forms.RadioButton();
-            this.radioButton3 = new System.Windows.Forms.RadioButton();
+            this.textBox1 = new System.Windows.Forms.TextBox();
             this.tabControl1.SuspendLayout();
             this.tabPage1.SuspendLayout();
             this.tabPage2.SuspendLayout();
@@ -228,7 +229,6 @@ namespace Spline
             this.groupBox1.TabIndex = 19;
             this.groupBox1.TabStop = false;
             this.groupBox1.Text = "Проміжок";
-            this.groupBox1.Enter += new System.EventHandler(this.groupBox1_Enter);
             // 
             // groupBox2
             // 
@@ -242,6 +242,17 @@ namespace Spline
             this.groupBox2.TabStop = false;
             this.groupBox2.Text = "Фунція-сплайна";
             // 
+            // radioButton3
+            // 
+            this.radioButton3.AutoSize = true;
+            this.radioButton3.Location = new System.Drawing.Point(22, 97);
+            this.radioButton3.Name = "radioButton3";
+            this.radioButton3.Size = new System.Drawing.Size(89, 17);
+            this.radioButton3.TabIndex = 2;
+            this.radioButton3.TabStop = true;
+            this.radioButton3.Text = "4-го степеня";
+            this.radioButton3.UseVisualStyleBackColor = true;
+            // 
             // radioButton2
             // 
             this.radioButton2.AutoSize = true;
@@ -264,22 +275,19 @@ namespace Spline
             this.radioButton1.Text = "Експоненціальна";
             this.radioButton1.UseVisualStyleBackColor = true;
             // 
-            // radioButton3
+            // textBox1
             // 
-            this.radioButton3.AutoSize = true;
-            this.radioButton3.Location = new System.Drawing.Point(22, 97);
-            this.radioButton3.Name = "radioButton3";
-            this.radioButton3.Size = new System.Drawing.Size(89, 17);
-            this.radioButton3.TabIndex = 2;
-            this.radioButton3.TabStop = true;
-            this.radioButton3.Text = "4-го степеня";
-            this.radioButton3.UseVisualStyleBackColor = true;
+            this.textBox1.Location = new System.Drawing.Point(619, 351);
+            this.textBox1.Name = "textBox1";
+            this.textBox1.Size = new System.Drawing.Size(100, 20);
+            this.textBox1.TabIndex = 21;
             // 
             // MainForm
             // 
             this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
             this.ClientSize = new System.Drawing.Size(881, 467);
+            this.Controls.Add(this.textBox1);
             this.Controls.Add(this.groupBox2);
             this.Controls.Add(this.groupBox1);
             this.Controls.Add(this.textBox7);
@@ -321,5 +329,6 @@ namespace Spline
         private System.Windows.Forms.RadioButton radioButton2;
         private System.Windows.Forms.RadioButton radioButton1;
         private System.Windows.Forms.RadioButton radioButton3;
+        private System.Windows.Forms.TextBox textBox1;
 	}
 }
diff --git a/Spline/MainForm.cs b/Spline/MainForm.cs
index bae9926..d92e1ec 100644
--- a/Spline/MainForm.cs
+++ b/Spline/MainForm.cs
@@ -8,6 +8,7 @@ using System.Drawing;
 using System.Windows.Forms;
 using Spline.Models;
 using Spline.App.Utils;
+using Spline.App.Models;
 
 namespace Spline
 {
@@ -34,29 +35,6 @@ namespace Spline
             
         }
 
-        protected double[] exp(AppMath.BaseFunc F, double x0, double x1)
-        {
-            double[] a = new double[4];
-            double x0_x1=(x0 - x1);
-            double LogF0_F1=Math.Log(F.Val(x0) / F.Val(x1));
-            
-
-            double d = a[3] = (F.Diff(x1) / F.Val(x1) + F.Diff(x0) / F.Val(x0)+2*LogF0_F1/(x1-x0))/Math.Pow(-1*x0_x1,2);
-
-            double c = a[2] = ((2 * x0 * x0 - x0 * x1 - x1 * x1) * a[3] - F.Diff(x0) / F.Val(x0) - LogF0_F1 / (-1 * x0_x1)) / (-1 * x0_x1);
-
-            double b = a[1] = 1 / (x1 - x0) * (Math.Log(F.Val(x1) / F.Val(x0)) - a[3] * (Math.Pow(x1, 3) - Math.Pow(x0, 3)) - c * (Math.Pow(x1, 2) - Math.Pow(x0, 2)));
-            //A
-            a[0] = F.Val(x0) * Math.Exp(-1*(d * Math.Pow(x0, 3) + c * Math.Pow(x0, 2) + b * x0));
-
-            return  a;
-        }
-
-        protected double AproximFunc(double x, double[] coef)
-        {
-            return (coef[0] * Math.Exp(coef[1] * x + coef[2] * Math.Pow(x, 2) + coef[3] * Math.Pow(x, 3)));
-        }
-
         private void button1_Click(object sender, EventArgs e)
         {
             section = new List<Section>();
@@ -66,6 +44,7 @@ namespace Spline
             double xmin = Convert.ToDouble(textBox5.Text);
             double xmax = Convert.ToDouble(textBox6.Text);
             Mu = Convert.ToDouble(textBox7.Text);
+            double R = Convert.ToInt32(textBox1.Text);
 
               GraphPane pane = zedGraphControl1.GraphPane;
               GraphPane pane2 = zedGraphControl2.GraphPane;
@@ -84,14 +63,51 @@ namespace Spline
 
                 PointPairList list_1 = new PointPairList();
                 PointPairList aprox = new PointPairList();
+           
+            ZzadanPohubkou result ;
+            double muPlus = 0, muMinus = 0;
+           
+            do{
+                result = new ZzadanPohubkou(xmin, xmax, Function, Mu);
+                result.Compute();
+                int K = result.Section.Count;
+                if (K > R)
+                {
+                    muMinus = Mu;
+                    if (muPlus != 0)
+                    {
+                        Mu = (Mu + muPlus) / 2.0;
+
+                    }
+                    else
+                    {
+                        Mu *= 1.1;
+                    }
+
+                }
+                if (K < R || (R == K && (Mu - result.Section[K-1].Mu)/Mu > 0.01))
+                {
+                    muPlus = Mu;
+                    if (muMinus != 0)
+                    {
+                        Mu = (Mu + muMinus) / 2.0;
+                    }
+                    else
+                    {
+                        Mu *= 0.9;
+                    }
+                }
+
+            }while(R!=result.Section.Count);
+
+                section = result.Section;
 
-                    Compute(xmin, xmax);
                     for (int i = 0; i < section.Count; i++)
                     {
                         for (double x = section[i].LeftPoint; x <= section[i].RightPoint; x += 0.001)
                         {
 
-                            double fx = AproximFunc(x, section[i].Coef);
+                            double fx = ExponencialSpline.AproximFunc(x, section[i].Coef);
 
                             aprox.Add(x, fx);
 
@@ -122,22 +138,20 @@ namespace Spline
                 zedGraphControl1.Invalidate();
                 list_1.Clear();
 
-                Logger.Info("Mu  function max value of each section fr function " + Function.ToString(), "MainForm");
+                Logger.Info("Mu  function max value of each section for function " + Function.ToString(), "MainForm");
                 int LogCounter = 1;
                 foreach (Section sec in section)
                 {
+
                     double[] coef = sec.Coef;
                     double max = 0;
-                
                     for (double x = sec.LeftPoint; x <= sec.RightPoint; x += 0.001)
                     {
 
-                        double fx = Math.Abs(Function.Val(x) - AproximFunc(x, coef));
+                        double fx = Math.Abs(Function.Val(x) - ExponencialSpline.AproximFunc(x, coef));
                         if (fx > max) max = fx;
                         list_1.Add(x, fx);
 
-                        Logger.Info("Mu function = " + list_1.ToArray().ToString(), "MainForm");
-
                     }
                     Logger.Info("Section#" + LogCounter++ + "Max value = " + max, "MainForm");
                 }
@@ -160,85 +174,12 @@ namespace Spline
                 zedGraphControl2.Invalidate();
         }
 
-
-        private void Compute(double a, double b)
-        {
-            int LOG_SECTION_COUNTER = 1;
-
-            double zl, zp,xmid,xtemp;
-            zl = a;
-            zp=b;
-            
-            double nextMu, prevMu;
-            prevMu = findMu(zl, zp, Function);
-            while(findMu(zl,b,Function)>Mu){
-            
-            xmid = (zl + zp) / 2;
-            nextMu=findMu(zl,xmid,Function);
-            if(nextMu<Mu && prevMu>Mu )
-            {
-                xtemp=(xmid+zp)/2.0;
-                prevMu=findMu(zl,xtemp,Function);
-                Logger.Info("Start computing Mu for Section# " + LOG_SECTION_COUNTER++, "MainForm");
-                while(Math.Abs(Mu-prevMu)/Mu>0.01 || prevMu>Mu)
-                {
-                    if(prevMu>Mu)
-                    {
-                        zp=xtemp;
-                        xtemp=(xmid+zp)/2.0;
-                    }
-                    else
-                    {
-                        xmid=xtemp;
-                        xtemp=(xtemp+zp)/2.0;  
-                    }
-                    prevMu=findMu(zl,xtemp,Function);
-
-                    Logger.Info("computed Mu =  " + prevMu, "MainForm");
-                }
-
-                zp=xtemp;
-                section.Add(new Section(zl, zp,exp(Function,zl,zp),prevMu));
-                zl=zp;
-                zp=b;
-                
-            }
-            else
-            {
-                zp=(zl+zp)/2;
-            }
-            prevMu=findMu(zl,zp,Function);
-
-            }
-            section.Add(new Section(zl, b,exp(Function,zl,b),prevMu));
-        }
-       
-        private double findMu(double xl,double xr,AppMath.BaseFunc Function)
-        {
-            double[] coef = exp(Function, xl, xr);
-            double h = (xr - xl) / Convert.ToDouble(100);
-                
-                double Mu = 0,fx;
-                for (double x = xl; x <= xr; x += h)
-                {
-
-                    fx = Math.Abs(Function.Val(x) - AproximFunc(x, coef));
-                    if (fx > Mu)
-                    {
-                        Mu = fx;
-                    }
-                }
-            return Mu;
-        }
-
         private void comboBox1_SelectedValueChanged(object sender, EventArgs e)
         {
-           Function=(AppMath.BaseFunc) comboBox1.SelectedValue;
+
         }
 
-        private void groupBox1_Enter(object sender, EventArgs e)
-        {
 
-        }
+       
     }
 }
diff --git a/Spline/Spline.csproj b/Spline/Spline.csproj
index 906804f..1aab0fe 100644
--- a/Spline/Spline.csproj
+++ b/Spline/Spline.csproj
@@ -54,6 +54,7 @@
     </Reference>
   </ItemGroup>
   <ItemGroup>
+    <Compile Include="App\Models\ExponencialSpline.cs" />
     <Compile Include="App\Utils\Logger.cs" />
     <Compile Include="MainForm.cs">
       <SubType>Form</SubType>
@@ -75,6 +76,7 @@
       <DependentUpon>Resources.resx</DependentUpon>
     </Compile>
     <Compile Include="App\Models\AppMath.cs" />
+    <Compile Include="ZzadanPohubkou.cs" />
   </ItemGroup>
   <ItemGroup>
     <EmbeddedResource Include="MainForm.resx">
diff --git a/Spline/ZzadanPohubkou.cs b/Spline/ZzadanPohubkou.cs
new file mode 100644
index 0000000..2b707b5
--- /dev/null
+++ b/Spline/ZzadanPohubkou.cs
@@ -0,0 +1,110 @@
+﻿using Spline.App.Models;
+using Spline.App.Utils;
+using Spline.Models;
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+
+
+namespace Spline
+{    
+    class ZzadanPohubkou
+    {
+        private AppMath.BaseFunc Function;
+        private double Mu = 0.005;
+        private IList<Section> section = new List<Section>();
+        private double  a;
+        private double b;
+
+
+       public ZzadanPohubkou(double a, double b, AppMath.BaseFunc Function, double Mu)
+        {
+            this.Function = Function;
+            this.a = a;
+            this.b = b;
+            this.Mu = Mu;
+        }
+
+
+       public IList<Section> Section
+       {
+           get
+           {
+               return section;
+           }
+       }
+
+
+        public void Compute()
+        {
+            int LOG_SECTION_COUNTER = 1;
+
+            double zl, zp, xmid, xtemp;
+            zl = a;
+            zp = b;
+
+            double nextMu, prevMu;
+            prevMu = findMu(zl, zp, Function);
+            while (findMu(zl, b, Function) > Mu)
+            {
+
+                xmid = (zl + zp) / 2;
+                nextMu = findMu(zl, xmid, Function);
+                if (nextMu < Mu && prevMu > Mu)
+                {
+                    xtemp = (xmid + zp) / 2.0;
+                    prevMu = findMu(zl, xtemp, Function);
+                    Logger.Info("Start computing Mu for Section# " + LOG_SECTION_COUNTER++, "MainForm");
+                    while (Math.Abs(Mu - prevMu) / Mu > 0.01 || prevMu > Mu)
+                    {
+                        if (prevMu > Mu)
+                        {
+                            zp = xtemp;
+                            xtemp = (xmid + zp) / 2.0;
+                        }
+                        else
+                        {
+                            xmid = xtemp;
+                            xtemp = (xtemp + zp) / 2.0;
+                        }
+                        prevMu = findMu(zl, xtemp, Function);
+
+                        Logger.Info("computed Mu =  " + prevMu, "MainForm");
+                    }
+
+                    zp = xtemp;
+                    section.Add(new Section(zl, zp, ExponencialSpline.GetCoeficients(Function, zl, zp), prevMu));
+                    zl = zp;
+                    zp = b;
+
+                }
+                else
+                {
+                    zp = (zl + zp) / 2;
+                }
+                prevMu = findMu(zl, zp, Function);
+
+            }
+            section.Add(new Section(zl, b, ExponencialSpline.GetCoeficients(Function, zl, b), prevMu));
+        }
+
+        private double findMu(double xL, double xR, AppMath.BaseFunc Function)
+        {
+            double[] coef = ExponencialSpline.GetCoeficients(Function, xL, xR);
+            double h = (xR - xL) / Convert.ToDouble(1000);
+
+            double Mu = -999, fx;
+            for (double x = xL; x <= xR; x += h)
+            {
+
+                fx = Math.Abs(Function.Val(x) - ExponencialSpline.AproximFunc(x, coef));
+                if (fx > Mu)
+                {
+                    Mu = fx;
+                }
+            }
+            return Mu;
+        }
+    }
+}
-- 
1.8.1.msysgit.1


From 219997ea32a1231899bee8198398442f979acfe5 Mon Sep 17 00:00:00 2001
From: Taras Krutiak <krut.taras@gmail.com>
Date: Sun, 8 Sep 2013 22:14:35 +0300
Subject: [PATCH 3/7] Added new spline method

---
 Spline/MainForm.Designer.cs | 130 +++++++++++++++++++++++++++++---------------
 Spline/MainForm.cs          |  83 ++++++++++++++++++----------
 2 files changed, 142 insertions(+), 71 deletions(-)

diff --git a/Spline/MainForm.Designer.cs b/Spline/MainForm.Designer.cs
index 6e62ff7..35e46b3 100644
--- a/Spline/MainForm.Designer.cs
+++ b/Spline/MainForm.Designer.cs
@@ -55,16 +55,21 @@ namespace Spline
             this.label7 = new System.Windows.Forms.Label();
             this.groupBox1 = new System.Windows.Forms.GroupBox();
             this.groupBox2 = new System.Windows.Forms.GroupBox();
-            this.radioButton3 = new System.Windows.Forms.RadioButton();
-            this.radioButton2 = new System.Windows.Forms.RadioButton();
             this.radioButton1 = new System.Windows.Forms.RadioButton();
             this.textBox1 = new System.Windows.Forms.TextBox();
+            this.groupBox3 = new System.Windows.Forms.GroupBox();
+            this.label1 = new System.Windows.Forms.Label();
+            this.groupBox4 = new System.Windows.Forms.GroupBox();
+            this.radioButton5 = new System.Windows.Forms.RadioButton();
+            this.radioButton4 = new System.Windows.Forms.RadioButton();
             this.tabControl1.SuspendLayout();
             this.tabPage1.SuspendLayout();
             this.tabPage2.SuspendLayout();
             this.tabPage3.SuspendLayout();
             this.groupBox1.SuspendLayout();
             this.groupBox2.SuspendLayout();
+            this.groupBox3.SuspendLayout();
+            this.groupBox4.SuspendLayout();
             this.SuspendLayout();
             // 
             // tabControl1
@@ -150,9 +155,9 @@ namespace Spline
             // 
             // button1
             // 
-            this.button1.Location = new System.Drawing.Point(759, 404);
+            this.button1.Location = new System.Drawing.Point(727, 423);
             this.button1.Name = "button1";
-            this.button1.Size = new System.Drawing.Size(105, 32);
+            this.button1.Size = new System.Drawing.Size(142, 32);
             this.button1.TabIndex = 2;
             this.button1.Text = "Обчислити";
             this.button1.UseVisualStyleBackColor = true;
@@ -163,7 +168,7 @@ namespace Spline
             this.comboBox1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
             this.comboBox1.Font = new System.Drawing.Font("Microsoft Sans Serif", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
             this.comboBox1.FormattingEnabled = true;
-            this.comboBox1.Location = new System.Drawing.Point(612, 34);
+            this.comboBox1.Location = new System.Drawing.Point(611, 23);
             this.comboBox1.Name = "comboBox1";
             this.comboBox1.Size = new System.Drawing.Size(258, 26);
             this.comboBox1.TabIndex = 3;
@@ -186,7 +191,7 @@ namespace Spline
             // label5
             // 
             this.label5.AutoSize = true;
-            this.label5.Location = new System.Drawing.Point(618, 303);
+            this.label5.Location = new System.Drawing.Point(19, 19);
             this.label5.Name = "label5";
             this.label5.Size = new System.Drawing.Size(115, 13);
             this.label5.TabIndex = 15;
@@ -194,7 +199,7 @@ namespace Spline
             // 
             // textBox7
             // 
-            this.textBox7.Location = new System.Drawing.Point(761, 300);
+            this.textBox7.Location = new System.Drawing.Point(147, 16);
             this.textBox7.Name = "textBox7";
             this.textBox7.Size = new System.Drawing.Size(100, 20);
             this.textBox7.TabIndex = 16;
@@ -223,51 +228,28 @@ namespace Spline
             this.groupBox1.Controls.Add(this.label7);
             this.groupBox1.Controls.Add(this.label6);
             this.groupBox1.Controls.Add(this.textBox6);
-            this.groupBox1.Location = new System.Drawing.Point(612, 215);
+            this.groupBox1.Location = new System.Drawing.Point(611, 203);
             this.groupBox1.Name = "groupBox1";
-            this.groupBox1.Size = new System.Drawing.Size(258, 79);
+            this.groupBox1.Size = new System.Drawing.Size(258, 75);
             this.groupBox1.TabIndex = 19;
             this.groupBox1.TabStop = false;
             this.groupBox1.Text = "Проміжок";
             // 
             // groupBox2
             // 
-            this.groupBox2.Controls.Add(this.radioButton3);
-            this.groupBox2.Controls.Add(this.radioButton2);
             this.groupBox2.Controls.Add(this.radioButton1);
-            this.groupBox2.Location = new System.Drawing.Point(612, 74);
+            this.groupBox2.Location = new System.Drawing.Point(611, 55);
             this.groupBox2.Name = "groupBox2";
-            this.groupBox2.Size = new System.Drawing.Size(258, 135);
+            this.groupBox2.Size = new System.Drawing.Size(258, 88);
             this.groupBox2.TabIndex = 20;
             this.groupBox2.TabStop = false;
             this.groupBox2.Text = "Фунція-сплайна";
             // 
-            // radioButton3
-            // 
-            this.radioButton3.AutoSize = true;
-            this.radioButton3.Location = new System.Drawing.Point(22, 97);
-            this.radioButton3.Name = "radioButton3";
-            this.radioButton3.Size = new System.Drawing.Size(89, 17);
-            this.radioButton3.TabIndex = 2;
-            this.radioButton3.TabStop = true;
-            this.radioButton3.Text = "4-го степеня";
-            this.radioButton3.UseVisualStyleBackColor = true;
-            // 
-            // radioButton2
-            // 
-            this.radioButton2.AutoSize = true;
-            this.radioButton2.Location = new System.Drawing.Point(22, 61);
-            this.radioButton2.Name = "radioButton2";
-            this.radioButton2.Size = new System.Drawing.Size(92, 17);
-            this.radioButton2.TabIndex = 1;
-            this.radioButton2.TabStop = true;
-            this.radioButton2.Text = "3-го степеня ";
-            this.radioButton2.UseVisualStyleBackColor = true;
-            // 
             // radioButton1
             // 
             this.radioButton1.AutoSize = true;
-            this.radioButton1.Location = new System.Drawing.Point(22, 29);
+            this.radioButton1.Checked = true;
+            this.radioButton1.Location = new System.Drawing.Point(9, 19);
             this.radioButton1.Name = "radioButton1";
             this.radioButton1.Size = new System.Drawing.Size(112, 17);
             this.radioButton1.TabIndex = 0;
@@ -277,21 +259,77 @@ namespace Spline
             // 
             // textBox1
             // 
-            this.textBox1.Location = new System.Drawing.Point(619, 351);
+            this.textBox1.Location = new System.Drawing.Point(147, 42);
             this.textBox1.Name = "textBox1";
+            this.textBox1.ReadOnly = true;
             this.textBox1.Size = new System.Drawing.Size(100, 20);
             this.textBox1.TabIndex = 21;
             // 
+            // groupBox3
+            // 
+            this.groupBox3.Controls.Add(this.label1);
+            this.groupBox3.Controls.Add(this.textBox1);
+            this.groupBox3.Controls.Add(this.textBox7);
+            this.groupBox3.Controls.Add(this.label5);
+            this.groupBox3.Location = new System.Drawing.Point(611, 284);
+            this.groupBox3.Name = "groupBox3";
+            this.groupBox3.Size = new System.Drawing.Size(258, 79);
+            this.groupBox3.TabIndex = 22;
+            this.groupBox3.TabStop = false;
+            // 
+            // label1
+            // 
+            this.label1.AutoSize = true;
+            this.label1.Location = new System.Drawing.Point(49, 42);
+            this.label1.Name = "label1";
+            this.label1.Size = new System.Drawing.Size(86, 13);
+            this.label1.TabIndex = 22;
+            this.label1.Text = "Кількість ланок";
+            this.label1.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
+            // 
+            // groupBox4
+            // 
+            this.groupBox4.Controls.Add(this.radioButton5);
+            this.groupBox4.Controls.Add(this.radioButton4);
+            this.groupBox4.Location = new System.Drawing.Point(611, 149);
+            this.groupBox4.Name = "groupBox4";
+            this.groupBox4.Size = new System.Drawing.Size(258, 48);
+            this.groupBox4.TabIndex = 23;
+            this.groupBox4.TabStop = false;
+            this.groupBox4.Text = "Наближення із заданою";
+            // 
+            // radioButton5
+            // 
+            this.radioButton5.AutoSize = true;
+            this.radioButton5.Checked = true;
+            this.radioButton5.Location = new System.Drawing.Point(22, 19);
+            this.radioButton5.Name = "radioButton5";
+            this.radioButton5.Size = new System.Drawing.Size(76, 17);
+            this.radioButton5.TabIndex = 24;
+            this.radioButton5.TabStop = true;
+            this.radioButton5.Text = "Похибкою";
+            this.radioButton5.UseVisualStyleBackColor = true;
+            this.radioButton5.CheckedChanged += new System.EventHandler(this.radioButton5_CheckedChanged);
+            // 
+            // radioButton4
+            // 
+            this.radioButton4.AutoSize = true;
+            this.radioButton4.Location = new System.Drawing.Point(133, 19);
+            this.radioButton4.Name = "radioButton4";
+            this.radioButton4.Size = new System.Drawing.Size(106, 17);
+            this.radioButton4.TabIndex = 3;
+            this.radioButton4.Text = "Кількістю ланок";
+            this.radioButton4.UseVisualStyleBackColor = true;
+            // 
             // MainForm
             // 
             this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
             this.ClientSize = new System.Drawing.Size(881, 467);
-            this.Controls.Add(this.textBox1);
+            this.Controls.Add(this.groupBox4);
+            this.Controls.Add(this.groupBox3);
             this.Controls.Add(this.groupBox2);
             this.Controls.Add(this.groupBox1);
-            this.Controls.Add(this.textBox7);
-            this.Controls.Add(this.label5);
             this.Controls.Add(this.comboBox1);
             this.Controls.Add(this.button1);
             this.Controls.Add(this.tabControl1);
@@ -305,8 +343,11 @@ namespace Spline
             this.groupBox1.PerformLayout();
             this.groupBox2.ResumeLayout(false);
             this.groupBox2.PerformLayout();
+            this.groupBox3.ResumeLayout(false);
+            this.groupBox3.PerformLayout();
+            this.groupBox4.ResumeLayout(false);
+            this.groupBox4.PerformLayout();
             this.ResumeLayout(false);
-            this.PerformLayout();
 
 		}
 		private System.Windows.Forms.TabPage tabPage2;
@@ -326,9 +367,12 @@ namespace Spline
         private System.Windows.Forms.Label label7;
         private System.Windows.Forms.GroupBox groupBox1;
         private System.Windows.Forms.GroupBox groupBox2;
-        private System.Windows.Forms.RadioButton radioButton2;
         private System.Windows.Forms.RadioButton radioButton1;
-        private System.Windows.Forms.RadioButton radioButton3;
         private System.Windows.Forms.TextBox textBox1;
+        private System.Windows.Forms.GroupBox groupBox3;
+        private System.Windows.Forms.Label label1;
+        private System.Windows.Forms.GroupBox groupBox4;
+        private System.Windows.Forms.RadioButton radioButton5;
+        private System.Windows.Forms.RadioButton radioButton4;
 	}
 }
diff --git a/Spline/MainForm.cs b/Spline/MainForm.cs
index d92e1ec..55e4b83 100644
--- a/Spline/MainForm.cs
+++ b/Spline/MainForm.cs
@@ -19,6 +19,7 @@ namespace Spline
     {
         private Expression expression;
         private double Mu=0.005;
+        double R;
         private AppMath.BaseFunc Function;
         private IList<Section> section=new List<Section>();
         public MainForm()
@@ -44,7 +45,10 @@ namespace Spline
             double xmin = Convert.ToDouble(textBox5.Text);
             double xmax = Convert.ToDouble(textBox6.Text);
             Mu = Convert.ToDouble(textBox7.Text);
-            double R = Convert.ToInt32(textBox1.Text);
+            if (radioButton4.Checked)
+            {
+                R = Convert.ToInt32(textBox1.Text);
+            }
 
               GraphPane pane = zedGraphControl1.GraphPane;
               GraphPane pane2 = zedGraphControl2.GraphPane;
@@ -65,41 +69,50 @@ namespace Spline
                 PointPairList aprox = new PointPairList();
            
             ZzadanPohubkou result ;
-            double muPlus = 0, muMinus = 0;
-           
-            do{
-                result = new ZzadanPohubkou(xmin, xmax, Function, Mu);
-                result.Compute();
-                int K = result.Section.Count;
-                if (K > R)
-                {
-                    muMinus = Mu;
-                    if (muPlus != 0)
-                    {
-                        Mu = (Mu + muPlus) / 2.0;
 
-                    }
-                    else
-                    {
-                        Mu *= 1.1;
-                    }
+            if (radioButton4.Checked)
+            {
+                double muPlus = 0, muMinus = 0;
 
-                }
-                if (K < R || (R == K && (Mu - result.Section[K-1].Mu)/Mu > 0.01))
+                do
                 {
-                    muPlus = Mu;
-                    if (muMinus != 0)
+                    result = new ZzadanPohubkou(xmin, xmax, Function, Mu);
+                    result.Compute();
+                    int K = result.Section.Count;
+                    if (K > R)
                     {
-                        Mu = (Mu + muMinus) / 2.0;
+                        muMinus = Mu;
+                        if (muPlus != 0)
+                        {
+                            Mu = (Mu + muPlus) / 2.0;
+
+                        }
+                        else
+                        {
+                            Mu *= 1.1;
+                        }
+
                     }
-                    else
+                    if (K < R || (R == K && (Mu - result.Section[K - 1].Mu) / Mu > 0.01))
                     {
-                        Mu *= 0.9;
+                        muPlus = Mu;
+                        if (muMinus != 0)
+                        {
+                            Mu = (Mu + muMinus) / 2.0;
+                        }
+                        else
+                        {
+                            Mu *= 0.9;
+                        }
                     }
-                }
-
-            }while(R!=result.Section.Count);
 
+                } while (R != result.Section.Count);
+            }
+            else
+            {
+                result = new ZzadanPohubkou(xmin, xmax, Function, Mu);
+                result.Compute();
+            }
                 section = result.Section;
 
                     for (int i = 0; i < section.Count; i++)
@@ -179,6 +192,20 @@ namespace Spline
 
         }
 
+        private void radioButton5_CheckedChanged(object sender, EventArgs e)
+        {
+            if (radioButton5.Checked)
+            {
+                textBox1.ReadOnly = true;
+                textBox1.Text = "";
+
+            }
+            else
+            {
+                textBox1.ReadOnly = false; 
+            }
+        }
+
 
        
     }
-- 
1.8.1.msysgit.1


From 1f4a0b96be17f894d05fe365dbe896f56057dd7c Mon Sep 17 00:00:00 2001
From: Taras Krutiak <krut.taras@gmail.com>
Date: Sun, 8 Sep 2013 23:02:59 +0300
Subject: [PATCH 4/7] fix new spline method

---
 Spline/MainForm.cs | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/Spline/MainForm.cs b/Spline/MainForm.cs
index 55e4b83..69ce2d3 100644
--- a/Spline/MainForm.cs
+++ b/Spline/MainForm.cs
@@ -73,12 +73,13 @@ namespace Spline
             if (radioButton4.Checked)
             {
                 double muPlus = 0, muMinus = 0;
+                int K;
 
                 do
                 {
                     result = new ZzadanPohubkou(xmin, xmax, Function, Mu);
                     result.Compute();
-                    int K = result.Section.Count;
+                    K = result.Section.Count;
                     if (K > R)
                     {
                         muMinus = Mu;
@@ -95,6 +96,7 @@ namespace Spline
                     }
                     if (K < R || (R == K && (Mu - result.Section[K - 1].Mu) / Mu > 0.01))
                     {
+                        K = -1;
                         muPlus = Mu;
                         if (muMinus != 0)
                         {
@@ -106,7 +108,7 @@ namespace Spline
                         }
                     }
 
-                } while (R != result.Section.Count);
+                } while (R != K);
             }
             else
             {
-- 
1.8.1.msysgit.1


From 886c575b945b082fe03ade75cacf677c5a04d79a Mon Sep 17 00:00:00 2001
From: Taras Krutiak <krut.taras@gmail.com>
Date: Thu, 19 Sep 2013 00:49:00 +0300
Subject: [PATCH 5/7] add selectBox with Spline aproximation functions
 [Unfinished]

---
 Spline/App/Models/AppMath.cs           |  4 +-
 Spline/App/Models/AppUtils.cs          | 94 ++++++++++++++++++++++++++++++++++
 Spline/App/Models/ComboBoxItem.cs      |  2 +-
 Spline/App/Models/ExponencialSpline.cs | 59 +++++++++++++++++----
 Spline/App/Models/FunctionUtil.cs      | 60 ----------------------
 Spline/App/Models/IFunction.cs         |  7 ++-
 Spline/IAproximatingFunction.cs        | 16 ++++++
 Spline/MainForm.Designer.cs            | 35 ++++++-------
 Spline/MainForm.cs                     |  9 ++--
 Spline/Spline.csproj                   |  3 +-
 Spline/ZzadanPohubkou.cs               |  8 +--
 11 files changed, 195 insertions(+), 102 deletions(-)
 create mode 100644 Spline/App/Models/AppUtils.cs
 delete mode 100644 Spline/App/Models/FunctionUtil.cs
 create mode 100644 Spline/IAproximatingFunction.cs

diff --git a/Spline/App/Models/AppMath.cs b/Spline/App/Models/AppMath.cs
index 19ab809..2f49b48 100644
--- a/Spline/App/Models/AppMath.cs
+++ b/Spline/App/Models/AppMath.cs
@@ -7,10 +7,8 @@ namespace Spline.Models
 {
     public class AppMath
     {
-        public abstract class BaseFunc: IFunction
+        public abstract class BaseFunc : ComboBoxBaseItem, IFunction
         {
-            public string Text { get; set; }
-       
             public override string ToString()
             {
                 return Text;
diff --git a/Spline/App/Models/AppUtils.cs b/Spline/App/Models/AppUtils.cs
new file mode 100644
index 0000000..99f1e8e
--- /dev/null
+++ b/Spline/App/Models/AppUtils.cs
@@ -0,0 +1,94 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Reflection;
+using Spline.Models;
+using ZedGraph;
+
+namespace Spline.Models
+{
+    public static class AppUtils
+    {
+        public static IList<AppMath.BaseFunc> GetAllFunctions()
+        {
+            IList<AppMath.BaseFunc> functions = new List<AppMath.BaseFunc>();
+
+            Assembly[] classes= AppDomain.CurrentDomain.GetAssemblies();
+
+            Type baseFunc = typeof(AppMath.BaseFunc);
+            for (int i = 0; i < classes.Length; i++)
+            {
+                foreach(Type type in classes[i].GetTypes())
+                {
+                      if (type.IsSubclassOf(baseFunc))
+                      {
+                        functions.Add((AppMath.BaseFunc) Activator.CreateInstance(type));
+                      }
+                }
+              
+            }
+            return functions;
+        }
+        //TODO refactor this and that
+        public static IList<AproximatingFunction> GetAllAproximatingFunctions()
+        {
+            IList<AproximatingFunction> functions = new List<AproximatingFunction>();
+
+            Assembly[] classes = AppDomain.CurrentDomain.GetAssemblies();
+
+            Type baseFunc = typeof(AproximatingFunction);
+            for (int i = 0; i < classes.Length; i++)
+            {
+                foreach (Type type in classes[i].GetTypes())
+                {
+                    if (type.IsSubclassOf(baseFunc))
+                    {
+                        functions.Add((AproximatingFunction)Activator.CreateInstance(type));
+                    }
+                }
+
+            }
+            return functions;
+        }
+
+        public static object[] GetComboboxItemsWithFunctions()
+        {
+            IList<AppMath.BaseFunc> functions = GetAllFunctions();
+            object[] cbItems = new object[functions.Count];
+            for (int i = 0; i < cbItems.Length; i++)
+            {
+                cbItems[i] = new ComboBoxItem(functions[i]);
+            }
+            return cbItems;
+        }
+
+        public static object[] GetComboboxItemsWithAproximatingFunctions()
+        {
+            IList<AproximatingFunction> functions = GetAllAproximatingFunctions();
+            object[] cbItems = new object[functions.Count];
+            for (int i = 0; i < cbItems.Length; i++)
+            {
+                cbItems[i] = new ComboBoxItem((ComboBoxBaseItem) functions[i]);
+            }
+            return cbItems;
+        }
+
+        public static PointPairList GetPointPairsInRange(double fromPoint,double toPoint,IFunction func,double h=0.001)
+        {
+            if (func == null) throw new ArgumentNullException("func");
+
+            PointPairList pointsList= new PointPairList();
+
+            for (double x = fromPoint; x <= toPoint; x += h)
+            {
+
+                double fx = func.Val(x);
+
+                pointsList.Add(x, fx);
+
+            }
+            return pointsList;
+        }
+    }
+}
diff --git a/Spline/App/Models/ComboBoxItem.cs b/Spline/App/Models/ComboBoxItem.cs
index b03bf16..f00f359 100644
--- a/Spline/App/Models/ComboBoxItem.cs
+++ b/Spline/App/Models/ComboBoxItem.cs
@@ -19,7 +19,7 @@ namespace Spline.Models
         {
         }
 
-        public ComboBoxItem(AppMath.BaseFunc func)
+        public ComboBoxItem(ComboBoxBaseItem func)
         {
             this.Text = func.Text;
             this.Value = func;
diff --git a/Spline/App/Models/ExponencialSpline.cs b/Spline/App/Models/ExponencialSpline.cs
index 3251c5e..c962a99 100644
--- a/Spline/App/Models/ExponencialSpline.cs
+++ b/Spline/App/Models/ExponencialSpline.cs
@@ -6,29 +6,70 @@ using System.Text;
 
 namespace Spline.App.Models
 {
-    class ExponencialSpline
+    class ExponencialSpline : AproximatingFunction
     {
-        public static double[] GetCoeficients(AppMath.BaseFunc F, double x0, double x1)
+        public ExponencialSpline()
+        {
+            Text = "Експоненціальна";
+        }
+        public override double[] GetCoeficients(AppMath.BaseFunc func, double x0, double x1)
         {
             double[] a = new double[4];
             double x0_x1 = (x0 - x1);
-            double LogF0_F1 = Math.Log(F.Val(x0) / F.Val(x1));
+            double LogF0_F1 = Math.Log(func.Val(x0) / func.Val(x1));
 
 
-            double d = a[3] = (F.Diff(x1) / F.Val(x1) + F.Diff(x0) / F.Val(x0) + 2 * LogF0_F1 / (x1 - x0)) / Math.Pow(-1 * x0_x1, 2);
+            double d = a[3] = (func.Diff(x1) / func.Val(x1) + func.Diff(x0) / func.Val(x0) + 2 * LogF0_F1 / (x1 - x0)) / Math.Pow(-1 * x0_x1, 2);
 
-            double c = a[2] = ((2 * x0 * x0 - x0 * x1 - x1 * x1) * a[3] - F.Diff(x0) / F.Val(x0) - LogF0_F1 / (-1 * x0_x1)) / (-1 * x0_x1);
+            double c = a[2] = ((2 * x0 * x0 - x0 * x1 - x1 * x1) * a[3] - func.Diff(x0) / func.Val(x0) - LogF0_F1 / (-1 * x0_x1)) / (-1 * x0_x1);
 
-            double b = a[1] = 1 / (x1 - x0) * (Math.Log(F.Val(x1) / F.Val(x0)) - a[3] * (Math.Pow(x1, 3) - Math.Pow(x0, 3)) - c * (Math.Pow(x1, 2) - Math.Pow(x0, 2)));
+            double b = a[1] = 1 / (x1 - x0) * (Math.Log(func.Val(x1) / func.Val(x0)) - a[3] * (Math.Pow(x1, 3) - Math.Pow(x0, 3)) - c * (Math.Pow(x1, 2) - Math.Pow(x0, 2)));
             //A
-            a[0] = F.Val(x0) * Math.Exp(-1 * (d * Math.Pow(x0, 3) + c * Math.Pow(x0, 2) + b * x0));
+            a[0] = func.Val(x0) * Math.Exp(-1 * (d * Math.Pow(x0, 3) + c * Math.Pow(x0, 2) + b * x0));
+
+            return a;
+        }
+
+        public override double GetAproximatingFunction(double x, double[] a)
+        {
+            return (a[0] * Math.Exp(a[1] * x + a[2] * Math.Pow(x, 2) + a[3] * Math.Pow(x, 3)));
+        }
+    }
+
+    class Multivalue3Spline : AproximatingFunction
+    {
+        public Multivalue3Spline()
+        {
+            Text = "Многочлен 3 порядку";
+        }
+
+        public override double[] GetCoeficients(AppMath.BaseFunc func, double x0, double x1)
+        {
+            double[] a = new double[4];
+            double  alpha1, alpha2, beta1, beta2, miu1, miu2;
+
+            double alpha = (func.Val(x1) - func.Val(x0))/(x1 - x0);
+            alpha1 = alpha - func.Diff(x0);
+            alpha2 = alpha - func.Diff(x1);
+
+            double beta = (x1*x1 - x0*x0)/(x1 - x0);
+            beta1 = beta - 2*x0;
+            beta2 = beta - 2*x1;
+
+            double miu = (Math.Pow(x1, 3) - Math.Pow(x0, 3))/(x1 - x0);
+            miu1 = miu - 3*x0*x0;
+            miu2 = miu - 3 * x1 * x1;
 
+            a[3] = (beta1*alpha2 - beta2*alpha1)/(beta1*miu2 - beta2*miu1);
+            a[2] = (alpha1 - miu1*a[3])/beta1;
+            a[1] = alpha - a[2]*beta - a[3]*miu;
+ 
             return a;
         }
 
-        public static double AproximFunc(double x, double[] coef)
+        public override double GetAproximatingFunction(double x, double[] a)
         {
-            return (coef[0] * Math.Exp(coef[1] * x + coef[2] * Math.Pow(x, 2) + coef[3] * Math.Pow(x, 3)));
+            return (a[0] + a[1]*x + a[2]*Math.Pow(x, 2) + a[3]*Math.Pow(x, 3));
         }
     }
 }
diff --git a/Spline/App/Models/FunctionUtil.cs b/Spline/App/Models/FunctionUtil.cs
deleted file mode 100644
index be9563a..0000000
--- a/Spline/App/Models/FunctionUtil.cs
+++ /dev/null
@@ -1,60 +0,0 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Reflection;
-using Spline.Models;
-using ZedGraph;
-
-namespace Spline.Models
-{
-    static class FunctionUtil
-    {
-        public static IList<AppMath.BaseFunc> GetAllFunctions()
-        {
-            IList<AppMath.BaseFunc> functions = new List<AppMath.BaseFunc>();
-
-            Assembly[] classes= AppDomain.CurrentDomain.GetAssemblies();
-
-            Type baseFunc = typeof(AppMath.BaseFunc);
-            for (int i = 0; i < classes.Length; i++)
-            {
-                foreach(Type type in classes[i].GetTypes())
-                {
-                      if (type.IsSubclassOf(baseFunc))
-                      {
-                        functions.Add((AppMath.BaseFunc) Activator.CreateInstance(type));
-                      }
-                }
-              
-            }
-            return functions;
-        }
-
-        public static object[] GetComboboxItemsWithFunctions()
-        {
-            IList<AppMath.BaseFunc> functions = GetAllFunctions();
-            object[] CBItems = new object[functions.Count];
-            for (int i = 0; i < CBItems.Length; i++)
-            {
-                CBItems[i] = new ComboBoxItem(functions[i]);
-            }
-            return CBItems;
-        }
-
-        public static PointPairList GetPointPairsInRange(double FromPoint,double ToPoint,IFunction func,double h=0.001)
-        {
-            PointPairList PointsList= new PointPairList();
-
-            for (double x = FromPoint; x <= ToPoint; x += h)
-            {
-
-                double fx = func.Val(x);
-
-                PointsList.Add(x, fx);
-
-            }
-            return PointsList;
-        }
-    }
-}
diff --git a/Spline/App/Models/IFunction.cs b/Spline/App/Models/IFunction.cs
index f550c32..9f2c38c 100644
--- a/Spline/App/Models/IFunction.cs
+++ b/Spline/App/Models/IFunction.cs
@@ -5,8 +5,13 @@ using System.Text;
 
 namespace Spline.Models
 {
-    interface IFunction
+    public interface IFunction
     {
         double Val(double x);
     }
+
+    public abstract class ComboBoxBaseItem
+    {
+       public string Text { get; set; }
+    }
 }
diff --git a/Spline/IAproximatingFunction.cs b/Spline/IAproximatingFunction.cs
new file mode 100644
index 0000000..2ff80bc
--- /dev/null
+++ b/Spline/IAproximatingFunction.cs
@@ -0,0 +1,16 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Security.Cryptography.X509Certificates;
+using System.Text;
+using Spline.Models;
+
+namespace Spline
+{
+    public abstract class AproximatingFunction : ComboBoxBaseItem
+    {
+       public abstract double[] GetCoeficients(AppMath.BaseFunc func, double x0, double x1);
+
+       public abstract double GetAproximatingFunction(double x, double[] a);
+    }
+}
diff --git a/Spline/MainForm.Designer.cs b/Spline/MainForm.Designer.cs
index 35e46b3..3041c09 100644
--- a/Spline/MainForm.Designer.cs
+++ b/Spline/MainForm.Designer.cs
@@ -55,13 +55,13 @@ namespace Spline
             this.label7 = new System.Windows.Forms.Label();
             this.groupBox1 = new System.Windows.Forms.GroupBox();
             this.groupBox2 = new System.Windows.Forms.GroupBox();
-            this.radioButton1 = new System.Windows.Forms.RadioButton();
             this.textBox1 = new System.Windows.Forms.TextBox();
             this.groupBox3 = new System.Windows.Forms.GroupBox();
             this.label1 = new System.Windows.Forms.Label();
             this.groupBox4 = new System.Windows.Forms.GroupBox();
             this.radioButton5 = new System.Windows.Forms.RadioButton();
             this.radioButton4 = new System.Windows.Forms.RadioButton();
+            this.comboBox2 = new System.Windows.Forms.ComboBox();
             this.tabControl1.SuspendLayout();
             this.tabPage1.SuspendLayout();
             this.tabPage2.SuspendLayout();
@@ -168,7 +168,7 @@ namespace Spline
             this.comboBox1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
             this.comboBox1.Font = new System.Drawing.Font("Microsoft Sans Serif", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
             this.comboBox1.FormattingEnabled = true;
-            this.comboBox1.Location = new System.Drawing.Point(611, 23);
+            this.comboBox1.Location = new System.Drawing.Point(611, 34);
             this.comboBox1.Name = "comboBox1";
             this.comboBox1.Size = new System.Drawing.Size(258, 26);
             this.comboBox1.TabIndex = 3;
@@ -237,26 +237,14 @@ namespace Spline
             // 
             // groupBox2
             // 
-            this.groupBox2.Controls.Add(this.radioButton1);
-            this.groupBox2.Location = new System.Drawing.Point(611, 55);
+            this.groupBox2.Controls.Add(this.comboBox2);
+            this.groupBox2.Location = new System.Drawing.Point(611, 78);
             this.groupBox2.Name = "groupBox2";
-            this.groupBox2.Size = new System.Drawing.Size(258, 88);
+            this.groupBox2.Size = new System.Drawing.Size(258, 65);
             this.groupBox2.TabIndex = 20;
             this.groupBox2.TabStop = false;
             this.groupBox2.Text = "Фунція-сплайна";
             // 
-            // radioButton1
-            // 
-            this.radioButton1.AutoSize = true;
-            this.radioButton1.Checked = true;
-            this.radioButton1.Location = new System.Drawing.Point(9, 19);
-            this.radioButton1.Name = "radioButton1";
-            this.radioButton1.Size = new System.Drawing.Size(112, 17);
-            this.radioButton1.TabIndex = 0;
-            this.radioButton1.TabStop = true;
-            this.radioButton1.Text = "Експоненціальна";
-            this.radioButton1.UseVisualStyleBackColor = true;
-            // 
             // textBox1
             // 
             this.textBox1.Location = new System.Drawing.Point(147, 42);
@@ -321,6 +309,16 @@ namespace Spline
             this.radioButton4.Text = "Кількістю ланок";
             this.radioButton4.UseVisualStyleBackColor = true;
             // 
+            // comboBox2
+            // 
+            this.comboBox2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+            this.comboBox2.Font = new System.Drawing.Font("Microsoft Sans Serif", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
+            this.comboBox2.FormattingEnabled = true;
+            this.comboBox2.Location = new System.Drawing.Point(9, 19);
+            this.comboBox2.Name = "comboBox2";
+            this.comboBox2.Size = new System.Drawing.Size(243, 26);
+            this.comboBox2.TabIndex = 24;
+            // 
             // MainForm
             // 
             this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
@@ -342,7 +340,6 @@ namespace Spline
             this.groupBox1.ResumeLayout(false);
             this.groupBox1.PerformLayout();
             this.groupBox2.ResumeLayout(false);
-            this.groupBox2.PerformLayout();
             this.groupBox3.ResumeLayout(false);
             this.groupBox3.PerformLayout();
             this.groupBox4.ResumeLayout(false);
@@ -367,12 +364,12 @@ namespace Spline
         private System.Windows.Forms.Label label7;
         private System.Windows.Forms.GroupBox groupBox1;
         private System.Windows.Forms.GroupBox groupBox2;
-        private System.Windows.Forms.RadioButton radioButton1;
         private System.Windows.Forms.TextBox textBox1;
         private System.Windows.Forms.GroupBox groupBox3;
         private System.Windows.Forms.Label label1;
         private System.Windows.Forms.GroupBox groupBox4;
         private System.Windows.Forms.RadioButton radioButton5;
         private System.Windows.Forms.RadioButton radioButton4;
+        private System.Windows.Forms.ComboBox comboBox2;
 	}
 }
diff --git a/Spline/MainForm.cs b/Spline/MainForm.cs
index 69ce2d3..a653bce 100644
--- a/Spline/MainForm.cs
+++ b/Spline/MainForm.cs
@@ -27,7 +27,8 @@ namespace Spline
          
             InitializeComponent();
 
-            comboBox1.Items.AddRange(FunctionUtil.GetComboboxItemsWithFunctions());
+            comboBox1.Items.AddRange(AppUtils.GetComboboxItemsWithFunctions());
+            comboBox2.Items.AddRange(AppUtils.GetComboboxItemsWithAproximatingFunctions());
             comboBox1.SelectedIndex = 0;
             GraphPane pane = zedGraphControl1.GraphPane;
             pane.Title.Text = "Графік функції та наближення";
@@ -63,7 +64,7 @@ namespace Spline
                 PointPairList list_aprox = new PointPairList();
 
 
-                list = FunctionUtil.GetPointPairsInRange(xmin, xmax, Function);     
+                list = AppUtils.GetPointPairsInRange(xmin, xmax, Function);     
 
                 PointPairList list_1 = new PointPairList();
                 PointPairList aprox = new PointPairList();
@@ -122,7 +123,7 @@ namespace Spline
                         for (double x = section[i].LeftPoint; x <= section[i].RightPoint; x += 0.001)
                         {
 
-                            double fx = ExponencialSpline.AproximFunc(x, section[i].Coef);
+                            double fx = new ExponencialSpline().GetAproximatingFunction(x, section[i].Coef);
 
                             aprox.Add(x, fx);
 
@@ -163,7 +164,7 @@ namespace Spline
                     for (double x = sec.LeftPoint; x <= sec.RightPoint; x += 0.001)
                     {
 
-                        double fx = Math.Abs(Function.Val(x) - ExponencialSpline.AproximFunc(x, coef));
+                        double fx = Math.Abs(Function.Val(x) - new ExponencialSpline().GetAproximatingFunction(x, coef));
                         if (fx > max) max = fx;
                         list_1.Add(x, fx);
 
diff --git a/Spline/Spline.csproj b/Spline/Spline.csproj
index 1aab0fe..cb1112e 100644
--- a/Spline/Spline.csproj
+++ b/Spline/Spline.csproj
@@ -56,6 +56,7 @@
   <ItemGroup>
     <Compile Include="App\Models\ExponencialSpline.cs" />
     <Compile Include="App\Utils\Logger.cs" />
+    <Compile Include="IAproximatingFunction.cs" />
     <Compile Include="MainForm.cs">
       <SubType>Form</SubType>
     </Compile>
@@ -65,7 +66,7 @@
     <Compile Include="App\Models\ApproxFunction.cs" />
     <Compile Include="App\Models\ComboBoxItem.cs" />
     <Compile Include="App\Models\ErmitSplineUtil.cs" />
-    <Compile Include="App\Models\FunctionUtil.cs" />
+    <Compile Include="App\Models\AppUtils.cs" />
     <Compile Include="App\Models\IFunction.cs" />
     <Compile Include="App\Models\Section.cs" />
     <Compile Include="Program.cs" />
diff --git a/Spline/ZzadanPohubkou.cs b/Spline/ZzadanPohubkou.cs
index 2b707b5..bb83798 100644
--- a/Spline/ZzadanPohubkou.cs
+++ b/Spline/ZzadanPohubkou.cs
@@ -74,7 +74,7 @@ namespace Spline
                     }
 
                     zp = xtemp;
-                    section.Add(new Section(zl, zp, ExponencialSpline.GetCoeficients(Function, zl, zp), prevMu));
+                    section.Add(new Section(zl, zp, new ExponencialSpline().GetCoeficients(Function, zl, zp), prevMu));
                     zl = zp;
                     zp = b;
 
@@ -86,19 +86,19 @@ namespace Spline
                 prevMu = findMu(zl, zp, Function);
 
             }
-            section.Add(new Section(zl, b, ExponencialSpline.GetCoeficients(Function, zl, b), prevMu));
+            section.Add(new Section(zl, b, new ExponencialSpline().GetCoeficients(Function, zl, b), prevMu));
         }
 
         private double findMu(double xL, double xR, AppMath.BaseFunc Function)
         {
-            double[] coef = ExponencialSpline.GetCoeficients(Function, xL, xR);
+            double[] coef = new ExponencialSpline().GetCoeficients(Function, xL, xR);
             double h = (xR - xL) / Convert.ToDouble(1000);
 
             double Mu = -999, fx;
             for (double x = xL; x <= xR; x += h)
             {
 
-                fx = Math.Abs(Function.Val(x) - ExponencialSpline.AproximFunc(x, coef));
+                fx = Math.Abs(Function.Val(x) - new ExponencialSpline().GetAproximatingFunction(x, coef));
                 if (fx > Mu)
                 {
                     Mu = fx;
-- 
1.8.1.msysgit.1


From ddf754b35edba2f2175a46fbb0e80bc570a425cc Mon Sep 17 00:00:00 2001
From: Taras Krutiak <krut.taras@gmail.com>
Date: Tue, 24 Sep 2013 00:25:47 +0300
Subject: [PATCH 6/7] refactor: moved some text to resourse file

---
 Spline/MainForm.Designer.cs             | 26 ++++++++-------
 Spline/MainForm.cs                      | 29 ++++++++++++-----
 Spline/Properties/Resources.Designer.cs | 56 ++++++++++++++++++++++++++++++++-
 Spline/Properties/Resources.resx        | 18 +++++++++++
 Spline/Spline.csproj                    |  1 +
 5 files changed, 110 insertions(+), 20 deletions(-)

diff --git a/Spline/MainForm.Designer.cs b/Spline/MainForm.Designer.cs
index 3041c09..0d3672e 100644
--- a/Spline/MainForm.Designer.cs
+++ b/Spline/MainForm.Designer.cs
@@ -7,6 +7,8 @@
  * To change this template use Tools | Options | Coding | Edit Standard Headers.
  */
 using Spline.Models;
+using Spline.Properties;
+
 namespace Spline
 {
 	partial class MainForm
@@ -55,13 +57,13 @@ namespace Spline
             this.label7 = new System.Windows.Forms.Label();
             this.groupBox1 = new System.Windows.Forms.GroupBox();
             this.groupBox2 = new System.Windows.Forms.GroupBox();
+            this.comboBox2 = new System.Windows.Forms.ComboBox();
             this.textBox1 = new System.Windows.Forms.TextBox();
             this.groupBox3 = new System.Windows.Forms.GroupBox();
             this.label1 = new System.Windows.Forms.Label();
             this.groupBox4 = new System.Windows.Forms.GroupBox();
             this.radioButton5 = new System.Windows.Forms.RadioButton();
             this.radioButton4 = new System.Windows.Forms.RadioButton();
-            this.comboBox2 = new System.Windows.Forms.ComboBox();
             this.tabControl1.SuspendLayout();
             this.tabPage1.SuspendLayout();
             this.tabPage2.SuspendLayout();
@@ -146,6 +148,7 @@ namespace Spline
             // 
             // richTextBox1
             // 
+            this.richTextBox1.BorderStyle = System.Windows.Forms.BorderStyle.None;
             this.richTextBox1.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
             this.richTextBox1.Location = new System.Drawing.Point(6, 15);
             this.richTextBox1.Name = "richTextBox1";
@@ -245,6 +248,16 @@ namespace Spline
             this.groupBox2.TabStop = false;
             this.groupBox2.Text = "Фунція-сплайна";
             // 
+            // comboBox2
+            // 
+            this.comboBox2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+            this.comboBox2.Font = new System.Drawing.Font("Microsoft Sans Serif", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
+            this.comboBox2.FormattingEnabled = true;
+            this.comboBox2.Location = new System.Drawing.Point(9, 19);
+            this.comboBox2.Name = "comboBox2";
+            this.comboBox2.Size = new System.Drawing.Size(243, 26);
+            this.comboBox2.TabIndex = 24;
+            // 
             // textBox1
             // 
             this.textBox1.Location = new System.Drawing.Point(147, 42);
@@ -268,6 +281,7 @@ namespace Spline
             // label1
             // 
             this.label1.AutoSize = true;
+            this.label1.ForeColor = System.Drawing.SystemColors.ControlText;
             this.label1.Location = new System.Drawing.Point(49, 42);
             this.label1.Name = "label1";
             this.label1.Size = new System.Drawing.Size(86, 13);
@@ -309,16 +323,6 @@ namespace Spline
             this.radioButton4.Text = "Кількістю ланок";
             this.radioButton4.UseVisualStyleBackColor = true;
             // 
-            // comboBox2
-            // 
-            this.comboBox2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
-            this.comboBox2.Font = new System.Drawing.Font("Microsoft Sans Serif", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
-            this.comboBox2.FormattingEnabled = true;
-            this.comboBox2.Location = new System.Drawing.Point(9, 19);
-            this.comboBox2.Name = "comboBox2";
-            this.comboBox2.Size = new System.Drawing.Size(243, 26);
-            this.comboBox2.TabIndex = 24;
-            // 
             // MainForm
             // 
             this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
diff --git a/Spline/MainForm.cs b/Spline/MainForm.cs
index a653bce..e285651 100644
--- a/Spline/MainForm.cs
+++ b/Spline/MainForm.cs
@@ -1,4 +1,6 @@
-﻿using NCalc;
+﻿using System.Drawing.Drawing2D;
+using NCalc;
+using Spline.Properties;
 using ZedGraph;
 
 using System;
@@ -31,9 +33,9 @@ namespace Spline
             comboBox2.Items.AddRange(AppUtils.GetComboboxItemsWithAproximatingFunctions());
             comboBox1.SelectedIndex = 0;
             GraphPane pane = zedGraphControl1.GraphPane;
-            pane.Title.Text = "Графік функції та наближення";
+            pane.Title.Text = Resources.FunctionChartTitle;
             GraphPane pane2 = zedGraphControl2.GraphPane;
-            pane2.Title.Text = "Графік функції похибки";
+            pane2.Title.Text = Resources.SplineChartTitle;
             
         }
 
@@ -137,13 +139,13 @@ namespace Spline
                             richTextBox1.Text += "a["+ii+"]= "+section[i].Coef[ii]+"\n";
 
                         }
-                        richTextBox1.Text += "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"+"\n\n";
+                        richTextBox1.Text += Resources.Separetor+"\n\n";
 
                     }
 
                  
-                LineItem myCurve = pane.AddCurve(Function.Text, list, Color.Blue, SymbolType.None);
-                LineItem myCurve2 = pane.AddCurve("aprox", aprox, Color.Red, SymbolType.None);
+                LineItem myCurve = pane.AddCurve(Resources.ChartFunctionName, list, Color.Blue, SymbolType.None);
+                LineItem myCurve2 = pane.AddCurve(Resources.ChartSplineName, aprox, Color.Red, SymbolType.None);
           
                 pane.XAxis.MajorGrid.IsVisible = true;
                 pane.YAxis.MajorGrid.IsVisible = true;
@@ -174,9 +176,18 @@ namespace Spline
 
                 LineItem newCurves = pane2.AddCurve("Ro", list_1, Color.Blue, SymbolType.None);
                 list_1 = new PointPairList();
+          /*      for (double i = xmin; i < xmax; i+=Math.Abs(xmax - xmin)/20)
+            {
+                list_1.Add(i, Mu);   
+            }*/
                 list_1.Add(xmin,Mu);
                 list_1.Add(xmax,Mu);
-                newCurves = pane2.AddCurve("Mu", list_1, Color.Red, SymbolType.None);
+                newCurves = pane2.AddCurve("Mu", list_1, Color.Red);
+            newCurves.Line.Style =DashStyle.Custom;
+            newCurves.Line.Width = 2;
+            newCurves.Line.DashOn = 5;
+            newCurves.Line.DashOff = 8;
+            newCurves.Symbol.Size = 0;
       
                 pane2.XAxis.MajorGrid.IsVisible = true;
                 pane2.YAxis.MajorGrid.IsVisible = true;
@@ -201,11 +212,13 @@ namespace Spline
             {
                 textBox1.ReadOnly = true;
                 textBox1.Text = "";
+                label1.ForeColor = System.Drawing.Color.DarkGray;
 
             }
             else
             {
-                textBox1.ReadOnly = false; 
+                textBox1.ReadOnly = false;
+                label1.ForeColor = System.Drawing.Color.Black;
             }
         }
 
diff --git a/Spline/Properties/Resources.Designer.cs b/Spline/Properties/Resources.Designer.cs
index 32ecd04..0aa8674 100644
--- a/Spline/Properties/Resources.Designer.cs
+++ b/Spline/Properties/Resources.Designer.cs
@@ -1,7 +1,7 @@
 ﻿//------------------------------------------------------------------------------
 // <auto-generated>
 //     This code was generated by a tool.
-//     Runtime Version:4.0.30319.18033
+//     Runtime Version:4.0.30319.18052
 //
 //     Changes to this file may cause incorrect behavior and will be lost if
 //     the code is regenerated.
@@ -61,6 +61,33 @@ namespace Spline.Properties {
         }
         
         /// <summary>
+        ///   Looks up a localized string similar to Баланснее наближення функцій нелінійними ермітовими сплайнами.
+        /// </summary>
+        internal static string AppName {
+            get {
+                return ResourceManager.GetString("AppName", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to F( x ).
+        /// </summary>
+        internal static string ChartFunctionName {
+            get {
+                return ResourceManager.GetString("ChartFunctionName", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to S( x ).
+        /// </summary>
+        internal static string ChartSplineName {
+            get {
+                return ResourceManager.GetString("ChartSplineName", resourceCulture);
+            }
+        }
+        
+        /// <summary>
         ///   Looks up a localized resource of type System.Drawing.Bitmap.
         /// </summary>
         internal static System.Drawing.Bitmap CodeCogsEqn {
@@ -69,5 +96,32 @@ namespace Spline.Properties {
                 return ((System.Drawing.Bitmap)(obj));
             }
         }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to Функції та сплайн.
+        /// </summary>
+        internal static string FunctionChartTitle {
+            get {
+                return ResourceManager.GetString("FunctionChartTitle", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
+        /// </summary>
+        internal static string Separetor {
+            get {
+                return ResourceManager.GetString("Separetor", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to Функція похибки.
+        /// </summary>
+        internal static string SplineChartTitle {
+            get {
+                return ResourceManager.GetString("SplineChartTitle", resourceCulture);
+            }
+        }
     }
 }
diff --git a/Spline/Properties/Resources.resx b/Spline/Properties/Resources.resx
index e900e41..c3f2bbd 100644
--- a/Spline/Properties/Resources.resx
+++ b/Spline/Properties/Resources.resx
@@ -121,4 +121,22 @@
   <data name="CodeCogsEqn" type="System.Resources.ResXFileRef, System.Windows.Forms">
     <value>..\Resources\CodeCogsEqn.gif;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
   </data>
+  <data name="Separetor" xml:space="preserve">
+    <value>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</value>
+  </data>
+  <data name="AppName" xml:space="preserve">
+    <value>Баланснее наближення функцій нелінійними ермітовими сплайнами</value>
+  </data>
+  <data name="ChartSplineName" xml:space="preserve">
+    <value>S( x )</value>
+  </data>
+  <data name="ChartFunctionName" xml:space="preserve">
+    <value>F( x )</value>
+  </data>
+  <data name="SplineChartTitle" xml:space="preserve">
+    <value>Функція похибки</value>
+  </data>
+  <data name="FunctionChartTitle" xml:space="preserve">
+    <value>Функції та сплайн</value>
+  </data>
 </root>
\ No newline at end of file
diff --git a/Spline/Spline.csproj b/Spline/Spline.csproj
index cb1112e..3401819 100644
--- a/Spline/Spline.csproj
+++ b/Spline/Spline.csproj
@@ -86,6 +86,7 @@
     <EmbeddedResource Include="Properties\Resources.resx">
       <Generator>ResXFileCodeGenerator</Generator>
       <LastGenOutput>Resources.Designer.cs</LastGenOutput>
+      <SubType>Designer</SubType>
     </EmbeddedResource>
   </ItemGroup>
   <ItemGroup>
-- 
1.8.1.msysgit.1


From c5960c46003626c9eb2500f6e947a9da2de6d010 Mon Sep 17 00:00:00 2001
From: Taras Krutiak <krut.taras@gmail.com>
Date: Wed, 25 Sep 2013 02:29:54 +0300
Subject: [PATCH 7/7] fix

---
 Spline/App/Models/AppMath.cs            | 30 ++++++++++++++++++++
 Spline/App/Models/AppUtils.cs           |  2 +-
 Spline/App/Models/ComboBoxItem.cs       | 15 +++++++++-
 Spline/App/Models/ExponencialSpline.cs  | 42 ++++++++++++++++++++++++++-
 Spline/MainForm.Designer.cs             | 50 +++++++++++++++++++++------------
 Spline/MainForm.cs                      | 25 +++++++++++------
 Spline/Properties/Resources.Designer.cs |  2 +-
 Spline/Properties/Resources.resx        |  2 +-
 Spline/ZzadanPohubkou.cs                | 34 +++++++++++-----------
 9 files changed, 155 insertions(+), 47 deletions(-)

diff --git a/Spline/App/Models/AppMath.cs b/Spline/App/Models/AppMath.cs
index 2f49b48..21cae16 100644
--- a/Spline/App/Models/AppMath.cs
+++ b/Spline/App/Models/AppMath.cs
@@ -169,6 +169,36 @@ namespace Spline.Models
             }
         }
 
+        public class Polinom3 : BaseFunc
+        {
+            public Polinom3()
+            {
+                this.Text = "1+2*x+3*x^2+4*x^3";
+            }
+
+            public override double Val(double x)
+            {
+                return (1+x+x*x+x*x*x);
+            }
+
+            public override double Diff(double x, int i = 1)
+            {
+
+                switch (i)
+                {
+                    case 1:
+                        return (1+2*x+3*x*x);
+                        break;
+                    case 2:
+                        return ( 2 + 6 * x);
+                        break;
+                    default:
+                        throw new Exception();
+                        break;
+                }
+            }
+        }
+
 
 
     }
diff --git a/Spline/App/Models/AppUtils.cs b/Spline/App/Models/AppUtils.cs
index 99f1e8e..f979cd0 100644
--- a/Spline/App/Models/AppUtils.cs
+++ b/Spline/App/Models/AppUtils.cs
@@ -69,7 +69,7 @@ namespace Spline.Models
             object[] cbItems = new object[functions.Count];
             for (int i = 0; i < cbItems.Length; i++)
             {
-                cbItems[i] = new ComboBoxItem((ComboBoxBaseItem) functions[i]);
+                cbItems[i] = new ComboBoxItem(functions[i]);
             }
             return cbItems;
         }
diff --git a/Spline/App/Models/ComboBoxItem.cs b/Spline/App/Models/ComboBoxItem.cs
index f00f359..b6cdb5c 100644
--- a/Spline/App/Models/ComboBoxItem.cs
+++ b/Spline/App/Models/ComboBoxItem.cs
@@ -27,8 +27,21 @@ namespace Spline.Models
 
         public AppMath.BaseFunc GetFunction()
         {
-            return (AppMath.BaseFunc)this.Value;
+            return GetTemplateFunction<AppMath.BaseFunc>();  
         }
 
+        public AproximatingFunction GetAproximatingFunction()
+        {
+            return GetTemplateFunction<AproximatingFunction>();
+        }
+
+        private T GetTemplateFunction<T>()
+        {
+            if (this.Value is T)
+            {
+                return (T) Value;
+            }
+            return default(T);
+        }
     }
 }
diff --git a/Spline/App/Models/ExponencialSpline.cs b/Spline/App/Models/ExponencialSpline.cs
index c962a99..4d69c07 100644
--- a/Spline/App/Models/ExponencialSpline.cs
+++ b/Spline/App/Models/ExponencialSpline.cs
@@ -63,7 +63,7 @@ namespace Spline.App.Models
             a[3] = (beta1*alpha2 - beta2*alpha1)/(beta1*miu2 - beta2*miu1);
             a[2] = (alpha1 - miu1*a[3])/beta1;
             a[1] = alpha - a[2]*beta - a[3]*miu;
- 
+            a[0] = func.Val(x0) - a[1]*x0 - a[2]*x0*x0 - a[3]*Math.Pow(x0, 3);
             return a;
         }
 
@@ -72,4 +72,44 @@ namespace Spline.App.Models
             return (a[0] + a[1]*x + a[2]*Math.Pow(x, 2) + a[3]*Math.Pow(x, 3));
         }
     }
+
+    class LogarifmicalSpline : AproximatingFunction
+    {
+        public LogarifmicalSpline()
+        {
+            Text = "Логарифмічна";
+        }
+
+        public override double[] GetCoeficients(AppMath.BaseFunc func, double x0, double x1)
+        {
+            double[] a = new double[4];
+            double m1, m2, m3, m4, j0, j1, j2;
+            double f0, df0, f1, df1;
+
+            f0 = func.Val(x0);
+            f1 = func.Val(x1);
+            df0 = func.Diff(x0);
+            df1 = func.Diff(x1);
+
+            j0 = (Math.Exp(f1) - Math.Exp(f0))/(x1 - x0);
+            j1 = x1 + x0;
+            j2 = x1*x1 + x0*x1 + x1*x1;
+
+            m1 = (df0*Math.Exp(f0) - j0)/(j1 - 2*x0);
+            m2 = (3*x0*x0 + j2)/(j1 - 2*x0);
+            m3 = (df1*Math.Exp(f1) - j0)/(j1 - 2*x1);
+            m4 = (3*x1*x1 + j2)/(j1 - 2*x1);
+
+            a[3] = (m3 - m1)/(m4 - m2);
+            a[2] = m1 - a[3]*m2;
+            a[1] = j0 + j1*a[2] + j2*a[3];
+            a[0] = Math.Exp(f0) - a[1]*x0 - a[2]*x0*x0 - a[3]*Math.Pow(x0,3);
+            return a;
+        }
+
+        public override double GetAproximatingFunction(double x, double[] a)
+        {
+            return Math.Log(a[0] + a[1] * x + a[2] * Math.Pow(x, 2) + a[3] * Math.Pow(x, 3));
+        }
+    }
 }
diff --git a/Spline/MainForm.Designer.cs b/Spline/MainForm.Designer.cs
index 0d3672e..3489c75 100644
--- a/Spline/MainForm.Designer.cs
+++ b/Spline/MainForm.Designer.cs
@@ -64,6 +64,7 @@ namespace Spline
             this.groupBox4 = new System.Windows.Forms.GroupBox();
             this.radioButton5 = new System.Windows.Forms.RadioButton();
             this.radioButton4 = new System.Windows.Forms.RadioButton();
+            this.groupBox5 = new System.Windows.Forms.GroupBox();
             this.tabControl1.SuspendLayout();
             this.tabPage1.SuspendLayout();
             this.tabPage2.SuspendLayout();
@@ -72,6 +73,7 @@ namespace Spline
             this.groupBox2.SuspendLayout();
             this.groupBox3.SuspendLayout();
             this.groupBox4.SuspendLayout();
+            this.groupBox5.SuspendLayout();
             this.SuspendLayout();
             // 
             // tabControl1
@@ -93,7 +95,7 @@ namespace Spline
             this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
             this.tabPage1.Size = new System.Drawing.Size(556, 417);
             this.tabPage1.TabIndex = 0;
-            this.tabPage1.Text = "Графік№1";
+            this.tabPage1.Text = "Графік ф-ції";
             this.tabPage1.UseVisualStyleBackColor = true;
             // 
             // zedGraphControl1
@@ -118,7 +120,7 @@ namespace Spline
             this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
             this.tabPage2.Size = new System.Drawing.Size(556, 417);
             this.tabPage2.TabIndex = 1;
-            this.tabPage2.Text = "Графік№2";
+            this.tabPage2.Text = "Графік ф-ції похибки";
             this.tabPage2.UseVisualStyleBackColor = true;
             // 
             // zedGraphControl2
@@ -149,7 +151,7 @@ namespace Spline
             // richTextBox1
             // 
             this.richTextBox1.BorderStyle = System.Windows.Forms.BorderStyle.None;
-            this.richTextBox1.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
+            this.richTextBox1.Font = new System.Drawing.Font("Microsoft Sans Serif", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
             this.richTextBox1.Location = new System.Drawing.Point(6, 15);
             this.richTextBox1.Name = "richTextBox1";
             this.richTextBox1.Size = new System.Drawing.Size(544, 396);
@@ -171,9 +173,9 @@ namespace Spline
             this.comboBox1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
             this.comboBox1.Font = new System.Drawing.Font("Microsoft Sans Serif", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
             this.comboBox1.FormattingEnabled = true;
-            this.comboBox1.Location = new System.Drawing.Point(611, 34);
+            this.comboBox1.Location = new System.Drawing.Point(7, 27);
             this.comboBox1.Name = "comboBox1";
-            this.comboBox1.Size = new System.Drawing.Size(258, 26);
+            this.comboBox1.Size = new System.Drawing.Size(245, 26);
             this.comboBox1.TabIndex = 3;
             this.comboBox1.SelectedValueChanged += new System.EventHandler(this.comboBox1_SelectedValueChanged);
             // 
@@ -196,15 +198,15 @@ namespace Spline
             this.label5.AutoSize = true;
             this.label5.Location = new System.Drawing.Point(19, 19);
             this.label5.Name = "label5";
-            this.label5.Size = new System.Drawing.Size(115, 13);
+            this.label5.Size = new System.Drawing.Size(50, 13);
             this.label5.TabIndex = 15;
-            this.label5.Text = "Похибка наближення";
+            this.label5.Text = "Похибка";
             // 
             // textBox7
             // 
-            this.textBox7.Location = new System.Drawing.Point(147, 16);
+            this.textBox7.Location = new System.Drawing.Point(133, 16);
             this.textBox7.Name = "textBox7";
-            this.textBox7.Size = new System.Drawing.Size(100, 20);
+            this.textBox7.Size = new System.Drawing.Size(114, 20);
             this.textBox7.TabIndex = 16;
             // 
             // label6
@@ -231,7 +233,7 @@ namespace Spline
             this.groupBox1.Controls.Add(this.label7);
             this.groupBox1.Controls.Add(this.label6);
             this.groupBox1.Controls.Add(this.textBox6);
-            this.groupBox1.Location = new System.Drawing.Point(611, 203);
+            this.groupBox1.Location = new System.Drawing.Point(611, 234);
             this.groupBox1.Name = "groupBox1";
             this.groupBox1.Size = new System.Drawing.Size(258, 75);
             this.groupBox1.TabIndex = 19;
@@ -241,12 +243,12 @@ namespace Spline
             // groupBox2
             // 
             this.groupBox2.Controls.Add(this.comboBox2);
-            this.groupBox2.Location = new System.Drawing.Point(611, 78);
+            this.groupBox2.Location = new System.Drawing.Point(611, 109);
             this.groupBox2.Name = "groupBox2";
             this.groupBox2.Size = new System.Drawing.Size(258, 65);
             this.groupBox2.TabIndex = 20;
             this.groupBox2.TabStop = false;
-            this.groupBox2.Text = "Фунція-сплайна";
+            this.groupBox2.Text = "Ланка сплайна";
             // 
             // comboBox2
             // 
@@ -260,10 +262,10 @@ namespace Spline
             // 
             // textBox1
             // 
-            this.textBox1.Location = new System.Drawing.Point(147, 42);
+            this.textBox1.Location = new System.Drawing.Point(133, 42);
             this.textBox1.Name = "textBox1";
             this.textBox1.ReadOnly = true;
-            this.textBox1.Size = new System.Drawing.Size(100, 20);
+            this.textBox1.Size = new System.Drawing.Size(114, 20);
             this.textBox1.TabIndex = 21;
             // 
             // groupBox3
@@ -272,7 +274,7 @@ namespace Spline
             this.groupBox3.Controls.Add(this.textBox1);
             this.groupBox3.Controls.Add(this.textBox7);
             this.groupBox3.Controls.Add(this.label5);
-            this.groupBox3.Location = new System.Drawing.Point(611, 284);
+            this.groupBox3.Location = new System.Drawing.Point(611, 315);
             this.groupBox3.Name = "groupBox3";
             this.groupBox3.Size = new System.Drawing.Size(258, 79);
             this.groupBox3.TabIndex = 22;
@@ -282,7 +284,7 @@ namespace Spline
             // 
             this.label1.AutoSize = true;
             this.label1.ForeColor = System.Drawing.SystemColors.ControlText;
-            this.label1.Location = new System.Drawing.Point(49, 42);
+            this.label1.Location = new System.Drawing.Point(19, 42);
             this.label1.Name = "label1";
             this.label1.Size = new System.Drawing.Size(86, 13);
             this.label1.TabIndex = 22;
@@ -293,7 +295,7 @@ namespace Spline
             // 
             this.groupBox4.Controls.Add(this.radioButton5);
             this.groupBox4.Controls.Add(this.radioButton4);
-            this.groupBox4.Location = new System.Drawing.Point(611, 149);
+            this.groupBox4.Location = new System.Drawing.Point(611, 180);
             this.groupBox4.Name = "groupBox4";
             this.groupBox4.Size = new System.Drawing.Size(258, 48);
             this.groupBox4.TabIndex = 23;
@@ -323,16 +325,26 @@ namespace Spline
             this.radioButton4.Text = "Кількістю ланок";
             this.radioButton4.UseVisualStyleBackColor = true;
             // 
+            // groupBox5
+            // 
+            this.groupBox5.Controls.Add(this.comboBox1);
+            this.groupBox5.Location = new System.Drawing.Point(611, 34);
+            this.groupBox5.Name = "groupBox5";
+            this.groupBox5.Size = new System.Drawing.Size(258, 65);
+            this.groupBox5.TabIndex = 25;
+            this.groupBox5.TabStop = false;
+            this.groupBox5.Text = "Наближувана функція";
+            // 
             // MainForm
             // 
             this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
             this.ClientSize = new System.Drawing.Size(881, 467);
+            this.Controls.Add(this.groupBox5);
             this.Controls.Add(this.groupBox4);
             this.Controls.Add(this.groupBox3);
             this.Controls.Add(this.groupBox2);
             this.Controls.Add(this.groupBox1);
-            this.Controls.Add(this.comboBox1);
             this.Controls.Add(this.button1);
             this.Controls.Add(this.tabControl1);
             this.Name = "MainForm";
@@ -348,6 +360,7 @@ namespace Spline
             this.groupBox3.PerformLayout();
             this.groupBox4.ResumeLayout(false);
             this.groupBox4.PerformLayout();
+            this.groupBox5.ResumeLayout(false);
             this.ResumeLayout(false);
 
 		}
@@ -375,5 +388,6 @@ namespace Spline
         private System.Windows.Forms.RadioButton radioButton5;
         private System.Windows.Forms.RadioButton radioButton4;
         private System.Windows.Forms.ComboBox comboBox2;
+        private System.Windows.Forms.GroupBox groupBox5;
 	}
 }
diff --git a/Spline/MainForm.cs b/Spline/MainForm.cs
index e285651..aa2481d 100644
--- a/Spline/MainForm.cs
+++ b/Spline/MainForm.cs
@@ -32,6 +32,7 @@ namespace Spline
             comboBox1.Items.AddRange(AppUtils.GetComboboxItemsWithFunctions());
             comboBox2.Items.AddRange(AppUtils.GetComboboxItemsWithAproximatingFunctions());
             comboBox1.SelectedIndex = 0;
+            comboBox2.SelectedIndex = 0;
             GraphPane pane = zedGraphControl1.GraphPane;
             pane.Title.Text = Resources.FunctionChartTitle;
             GraphPane pane2 = zedGraphControl2.GraphPane;
@@ -44,6 +45,7 @@ namespace Spline
             section = new List<Section>();
           
             Function = ((ComboBoxItem)comboBox1.SelectedItem).GetFunction();
+            AproximatingFunction aproxFunction = ((ComboBoxItem)comboBox2.SelectedItem).GetAproximatingFunction();
 
             double xmin = Convert.ToDouble(textBox5.Text);
             double xmax = Convert.ToDouble(textBox6.Text);
@@ -80,7 +82,7 @@ namespace Spline
 
                 do
                 {
-                    result = new ZzadanPohubkou(xmin, xmax, Function, Mu);
+                    result = new ZzadanPohubkou(xmin, xmax, Function, aproxFunction, Mu);
                     result.Compute();
                     K = result.Section.Count;
                     if (K > R)
@@ -97,7 +99,12 @@ namespace Spline
                         }
 
                     }
-                    if (K < R || (R == K && (Mu - result.Section[K - 1].Mu) / Mu > 0.01))
+                    bool fits=false;
+                    if((Mu - result.Section[K - 1].Mu) / Mu > 0.01)
+                    {
+                        fits = true;
+                    }
+                    if (K < R || R == K && fits)
                     {
                         K = -1;
                         muPlus = Mu;
@@ -115,7 +122,7 @@ namespace Spline
             }
             else
             {
-                result = new ZzadanPohubkou(xmin, xmax, Function, Mu);
+                result = new ZzadanPohubkou(xmin, xmax, Function, aproxFunction, Mu);
                 result.Compute();
             }
                 section = result.Section;
@@ -125,21 +132,21 @@ namespace Spline
                         for (double x = section[i].LeftPoint; x <= section[i].RightPoint; x += 0.001)
                         {
 
-                            double fx = new ExponencialSpline().GetAproximatingFunction(x, section[i].Coef);
+                            double fx = aproxFunction.GetAproximatingFunction(x, section[i].Coef);
 
                             aprox.Add(x, fx);
 
                         }
 
-                        richTextBox1.Text += "Ланка # " + (i + 1) + "\n\nxL= " + section[i].LeftPoint
+                        richTextBox1.Text += "Ланка # " + (i + 1) + "\nxL= " + section[i].LeftPoint
                             +"\nxR= " + section[i].RightPoint + "\nMu= "
-                            + section[i].Mu + "\n\n" + "Коефіцієнти\n\n";
+                            + section[i].Mu + "\n\n" + "Коефіцієнти\n";
                         for (int ii = 0; ii < section[i].Coef.Length; ii++)
                         {
                             richTextBox1.Text += "a["+ii+"]= "+section[i].Coef[ii]+"\n";
 
                         }
-                        richTextBox1.Text += Resources.Separetor+"\n\n";
+                        richTextBox1.Text += Resources.Separetor+"\n";
 
                     }
 
@@ -166,7 +173,7 @@ namespace Spline
                     for (double x = sec.LeftPoint; x <= sec.RightPoint; x += 0.001)
                     {
 
-                        double fx = Math.Abs(Function.Val(x) - new ExponencialSpline().GetAproximatingFunction(x, coef));
+                        double fx = Math.Abs(Function.Val(x) - aproxFunction.GetAproximatingFunction(x, coef));
                         if (fx > max) max = fx;
                         list_1.Add(x, fx);
 
@@ -210,6 +217,7 @@ namespace Spline
         {
             if (radioButton5.Checked)
             {
+                label5.Text = "Похибка";
                 textBox1.ReadOnly = true;
                 textBox1.Text = "";
                 label1.ForeColor = System.Drawing.Color.DarkGray;
@@ -217,6 +225,7 @@ namespace Spline
             }
             else
             {
+                label5.Text = "Точність побудови";
                 textBox1.ReadOnly = false;
                 label1.ForeColor = System.Drawing.Color.Black;
             }
diff --git a/Spline/Properties/Resources.Designer.cs b/Spline/Properties/Resources.Designer.cs
index 0aa8674..fdc93f0 100644
--- a/Spline/Properties/Resources.Designer.cs
+++ b/Spline/Properties/Resources.Designer.cs
@@ -98,7 +98,7 @@ namespace Spline.Properties {
         }
         
         /// <summary>
-        ///   Looks up a localized string similar to Функції та сплайн.
+        ///   Looks up a localized string similar to Графік функції та сплайна.
         /// </summary>
         internal static string FunctionChartTitle {
             get {
diff --git a/Spline/Properties/Resources.resx b/Spline/Properties/Resources.resx
index c3f2bbd..dc05feb 100644
--- a/Spline/Properties/Resources.resx
+++ b/Spline/Properties/Resources.resx
@@ -137,6 +137,6 @@
     <value>Функція похибки</value>
   </data>
   <data name="FunctionChartTitle" xml:space="preserve">
-    <value>Функції та сплайн</value>
+    <value>Графік функції та сплайна</value>
   </data>
 </root>
\ No newline at end of file
diff --git a/Spline/ZzadanPohubkou.cs b/Spline/ZzadanPohubkou.cs
index bb83798..32eefd3 100644
--- a/Spline/ZzadanPohubkou.cs
+++ b/Spline/ZzadanPohubkou.cs
@@ -11,19 +11,21 @@ namespace Spline
 {    
     class ZzadanPohubkou
     {
-        private AppMath.BaseFunc Function;
+        private readonly AppMath.BaseFunc _function;
         private double Mu = 0.005;
         private IList<Section> section = new List<Section>();
         private double  a;
         private double b;
+        private AproximatingFunction _aproximatingFunction;
 
 
-       public ZzadanPohubkou(double a, double b, AppMath.BaseFunc Function, double Mu)
+       public ZzadanPohubkou(double a, double b, AppMath.BaseFunc function,AproximatingFunction aproximatingFunction, double Mu)
         {
-            this.Function = Function;
-            this.a = a;
-            this.b = b;
-            this.Mu = Mu;
+           this._function = function;
+           this._aproximatingFunction = aproximatingFunction;
+           this.a = a;
+           this.b = b;
+           this.Mu = Mu;
         }
 
 
@@ -45,16 +47,16 @@ namespace Spline
             zp = b;
 
             double nextMu, prevMu;
-            prevMu = findMu(zl, zp, Function);
-            while (findMu(zl, b, Function) > Mu)
+            prevMu = findMu(zl, zp, _function);
+            while (findMu(zl, b, _function) > Mu)
             {
 
                 xmid = (zl + zp) / 2;
-                nextMu = findMu(zl, xmid, Function);
+                nextMu = findMu(zl, xmid, _function);
                 if (nextMu < Mu && prevMu > Mu)
                 {
                     xtemp = (xmid + zp) / 2.0;
-                    prevMu = findMu(zl, xtemp, Function);
+                    prevMu = findMu(zl, xtemp, _function);
                     Logger.Info("Start computing Mu for Section# " + LOG_SECTION_COUNTER++, "MainForm");
                     while (Math.Abs(Mu - prevMu) / Mu > 0.01 || prevMu > Mu)
                     {
@@ -68,13 +70,13 @@ namespace Spline
                             xmid = xtemp;
                             xtemp = (xtemp + zp) / 2.0;
                         }
-                        prevMu = findMu(zl, xtemp, Function);
+                        prevMu = findMu(zl, xtemp, _function);
 
                         Logger.Info("computed Mu =  " + prevMu, "MainForm");
                     }
 
                     zp = xtemp;
-                    section.Add(new Section(zl, zp, new ExponencialSpline().GetCoeficients(Function, zl, zp), prevMu));
+                    section.Add(new Section(zl, zp, _aproximatingFunction.GetCoeficients(_function, zl, zp), prevMu));
                     zl = zp;
                     zp = b;
 
@@ -83,22 +85,22 @@ namespace Spline
                 {
                     zp = (zl + zp) / 2;
                 }
-                prevMu = findMu(zl, zp, Function);
+                prevMu = findMu(zl, zp, _function);
 
             }
-            section.Add(new Section(zl, b, new ExponencialSpline().GetCoeficients(Function, zl, b), prevMu));
+            section.Add(new Section(zl, b, _aproximatingFunction.GetCoeficients(_function, zl, b), prevMu));
         }
 
         private double findMu(double xL, double xR, AppMath.BaseFunc Function)
         {
-            double[] coef = new ExponencialSpline().GetCoeficients(Function, xL, xR);
+            double[] coef = _aproximatingFunction.GetCoeficients(Function, xL, xR);
             double h = (xR - xL) / Convert.ToDouble(1000);
 
             double Mu = -999, fx;
             for (double x = xL; x <= xR; x += h)
             {
 
-                fx = Math.Abs(Function.Val(x) - new ExponencialSpline().GetAproximatingFunction(x, coef));
+                fx = Math.Abs(Function.Val(x) - _aproximatingFunction.GetAproximatingFunction(x, coef));
                 if (fx > Mu)
                 {
                     Mu = fx;
-- 
1.8.1.msysgit.1

